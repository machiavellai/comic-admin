<header className="border-b border-border">
  <div className="container flex h-12 sm:h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
    <Link href="/dashboard" className="flex flex-col sm:flex-row items-center gap-2">
      <Image
        src="/kingdom-logo.png"
        alt="Kingdom Comics"
        width={32}
        height={32}
        className="flex-shrink-0"
      />
      <span className="comic-heading text-xl sm:text-2xl w-auto max-w-[70%] sm:max-w-none">
        COMIC ADMIN
      </span>
    </Link>

    <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
      <div className="flex items-center gap-2 text-xs sm:text-sm text-muted-foreground">
        <User className="h-4 w-4" />
        <span>{displayName}</span>
      </div>
      <Button
        onClick={handleLogout}
        variant="ghost"
        className="comic-button gap-2 w-full sm:w-auto min-h-[40px]"
      >
        <LogOut className="h-5 w-5" />
        <span>LOGOUT</span>
      </Button>
    </div>
  </div>
</header>








"use client";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, User2, Shield, CheckCircle, XCircle, Trash2 } from "lucide-react";
import { useState } from "react";
import { User } from "@/types/types";

type ToggleSubscription = (
  userId: string,
  currentStatus: boolean
) => Promise<void>;

export default function UsersClient({
  users,
  toggleSubscription,
}: {
  users: User[];
  toggleSubscription: ToggleSubscription;
}) {
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  const handleViewDetails = (user: User) => {
    setSelectedUser(user);
  };

  const handleCloseModal = () => {
    setSelectedUser(null);
  };

  const handleDeleteUser = async (userId: string) => {
    if (!confirm(`Are you sure you want to delete the user "${users.find((u) => u.id === userId)?.email}"?`)) {
      return;
    }

    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        const { error } = await response.json();
        throw new Error(error || "Failed to delete user");
      }

      // Update local state (optional, or reload)
      window.location.reload();
    } catch (err) {
      console.error("Error deleting user:", err);
      alert(err instanceof Error ? err.message : "Failed to delete user");
    }
  };

  return (
    <div className="space-y-6 px-4 sm:px-6 lg:px-8">
      <div className="flex flex-col items-center sm:items-start sm:flex-row justify-between gap-4">
        <div className="text-center sm:text-left">
          <h1 className="comic-heading text-3xl sm:text-4xl text-black mb-1">
            YOUR USERS
          </h1>
          <p className="text-muted-foreground text-sm sm:text-base">
            Manage your user accounts
          </p>
        </div>
      </div>

      <Card className="comic-panel overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full text-sm min-w-[40rem]">
            <thead className="hidden sm:table-header-group">
              <tr className="bg-muted border-b border-border">
                <th className="p-2 text-left">Email</th>
                <th className="p-2 text-left">Role</th>
                <th className="p-2 text-left">Subscribed</th>
                <th className="p-2 text-left">Created At</th>
                <th className="p-2 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr
                  key={user.id}
                  className="border-b border-border sm:table-row block sm:flex sm:flex-col sm:gap-2 p-2 sm:p-0"
                >
                  <td className="p-2 sm:p-2 w-full sm:w-auto">
                    <div className="sm:hidden font-medium">Email:</div>
                    <span className="block sm:inline">{user.email}</span>
                  </td>
                  <td className="p-2 sm:p-2 w-full sm:w-auto">
                    <div className="sm:hidden font-medium">Role:</div>
                    <Badge
                      variant="outline"
                      className="font-medium flex items-center gap-1"
                    >
                      <Shield className="h-3 w-3" />
                      {user.role}
                    </Badge>
                  </td>
                  <td className="p-2 sm:p-2 w-full sm:w-auto">
                    <div className="sm:hidden font-medium">Subscribed:</div>
                    <Badge
                      variant="secondary"
                      className="font-medium flex items-center gap-1"
                    >
                      {user.subscribed ? (
                        <CheckCircle className="h-3 w-3 text-green-500" />
                      ) : (
                        <XCircle className="h-3 w-3 text-red-500" />
                      )}
                      {user.subscribed ? "Yes" : "No"}
                    </Badge>
                  </td>
                  <td className="p-2 sm:p-2 w-full sm:w-auto">
                    <div className="sm:hidden font-medium">Created At:</div>
                    <span className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      {user.created_at
                        ? new Date(user.created_at).toLocaleDateString()
                        : "N/A"}
                    </span>
                  </td>
                  <td className="p-2 sm:p-2 w-full sm:w-auto">
                    <div className="sm:hidden font-medium">Actions:</div>
                    <div className="flex flex-col sm:flex-row gap-2">
                      <Button
                        variant="outline"
                        className="comic-button w-full sm:w-auto"
                        onClick={() => handleViewDetails(user)}
                      >
                        View Details
                      </Button>
                      <Button
                        variant={user.subscribed ? "outline" : "default"}
                        className={`comic-button w-full sm:w-auto ${user.subscribed
                          ? "text-yellow-600 hover:text-yellow-700"
                          : "text-green-600 hover:text-green-700"
                          }`}
                        onClick={() =>
                          toggleSubscription(user.id, user.subscribed ?? false)
                        }
                      >
                        {user.subscribed ? "Unsubscribe" : "Subscribe"}
                      </Button>
                      {user.role !== "admin" && (
                        <Button
                          variant="outline"
                          className="text-destructive hover:text-destructive w-full sm:w-auto"
                          onClick={() => handleDeleteUser(user.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>

      {users.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl sm:text-3xl mb-2">NO USERS YET!</h3>
          <p className="text-muted-foreground text-sm sm:text-base mb-6">
            No users have signed up yet.
          </p>
        </div>
      )}

      {selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-4 sm:p-6 max-w-[90%] sm:max-w-md w-full comic-panel">
            <h2 className="comic-heading text-2xl sm:text-3xl mb-4">User Details</h2>
            <div className="space-y-2 text-sm sm:text-base">
              <p>
                <strong>ID:</strong> {selectedUser.id}
              </p>
              <p>
                <strong>Email:</strong> {selectedUser.email}
              </p>
              <p>
                <strong>Role:</strong> {selectedUser.role}
              </p>
              <p>
                <strong>Subscribed:</strong> {selectedUser.subscribed ? "Yes" : "No"}
              </p>
              {selectedUser.created_at && (
                <p>
                  <strong>Created At:</strong>{" "}
                  {new Date(selectedUser.created_at).toLocaleString()}
                </p>
              )}
            </div>
            <div className="mt-4 sm:mt-6 flex justify-end">
              <Button
                variant="outline"
                className="comic-button w-full sm:w-auto"
                onClick={handleCloseModal}
              >
                Close
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}










import { supabase } from "@/lib/supabase";
import { Book, ComicIssue, User } from "@/types/types";
import { create } from "zustand";

type State = {
  books: Book[];
  user: User | null;
  issues: { [bookId: string]: ComicIssue[] };
  loading: boolean;
  error: string | null;
  fetchBooks: () => Promise<void>;
  fetchUser: () => Promise<void>;
  fetchIssues: (bookId: string) => Promise<void>;
  clearBooks: () => void;
};

export const useStore = create<State>((set) => ({
  user: null,
  books: [],
  issues: {},
  loading: false,
  error: null,

  fetchBooks: async () => {
    set({ loading: true, error: null });
    try {
      const { data, error } = await supabase
        .from("books")
        .select("*")
        .is("parent_id", null) // Only fetch parent comics
        .order("created_at", { ascending: false });

      if (error) throw error;

      set({ books: data as Book[] });
    } catch (err) {
      set({
        error: err instanceof Error ? err.message : "Failed to fetch books",
      });
    } finally {
      set({ loading: false });
    }
  },

  fetchIssues: async (bookId: string) => {
    set({ loading: true, error: null });
    try {
      const { data, error } = await supabase
        .from("comic_issues")
        .select("*")
        .eq("book_id", bookId)
        .order("issue_number", { ascending: true });

      if (error) throw error;

      set((state) => ({
        issues: {
          ...state.issues,
          [bookId]: data as ComicIssue[],
        },
      }));
    } catch (err) {
      set({
        error: err instanceof Error ? err.message : "Failed to fetch issues",
      });
    } finally {
      set({ loading: false });
    }
  },

  fetchUser: async () => {
    try {
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      if (authError) throw new Error(`Auth error: ${authError.message}`);
      if (!authUser) {
        set({ user: null });
        return;
      }
      console.log("Fetching user with ID:", authUser.id); // Debug log
      const { data, error } = await supabase
        .from("users")
        .select("*")
        .eq("id", authUser.id)
        .single();

      if (error) {
        throw new Error(
          `Supabase error: ${error.message}, code: ${error.code}, details: ${error.details || "none"}`
        );
      }

      if (!data) {
        throw new Error(`No user found in 'users' table for id: ${authUser.id}`);
      }

      set({ user: data });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Unknown error fetching user";
      console.error("Error fetching user:", errorMessage);
      set({ user: null });
    }
  },
  clearBooks: () => set({ books: [], loading: false, error: null }),
}));













"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase";
import { User } from "@/types/types";
import UsersClient from "./UsersClient";

export default function UsersPage() {
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          router.push("/login");
          return;
        }

        // Fetch current user
        const { data: userData, error: userError } = await supabase
          .from("users")
          .select("id, email, role, subscribed")
          .eq("id", session.user.id)
          .single();
        console.log("Current user data:", userData); // Debug log
        if (userError || !userData || userData.role !== "admin") {
          router.push("/dashboard");
          return;
        }
        if (mounted) {
          setCurrentUser(userData);
        }

        // Fetch all users with explicit array handling
        const { data: usersData, error: fetchError } = await supabase
          .from("users")
          .select("*"); // Use * to ensure all columns, or specify needed ones
        console.log("Raw all users data:", usersData); // Debug log
        if (fetchError) {
          throw new Error(fetchError.message);
        }
        if (mounted) {
          // Ensure usersData is an array, even if single row
          setUsers(Array.isArray(usersData) ? usersData : usersData ? [usersData] : []);
          setLoading(false);
        }
      } catch (err) {
        if (mounted) {
          setError(err instanceof Error ? err.message : "Failed to load users");
          setLoading(false);
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [router]);

  const toggleSubscription = async (userId: string, currentStatus: boolean) => {
    if (!currentUser || currentUser.role !== "admin") {
      alert("Unauthorized");
      return;
    }

    try {
      const { error } = await supabase
        .from("users")
        .update({ subscribed: !currentStatus })
        .eq("id", userId);
      if (error) throw error;

      // Update local state
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.id === userId ? { ...user, subscribed: !currentStatus } : user
        )
      );
    } catch (err) {
      console.error("Error updating subscription:", err);
      alert("Failed to update subscription");
    }
  };

  if (loading) {
    return <div>Loading users...</div>;
  }

  if (error) {
    return <div className="text-destructive">{error}</div>;
  }

  return <UsersClient users={users} toggleSubscription={toggleSubscription} />;
}









"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase";
import { User } from "@/types/types";
import UsersClient from "./UsersClient";

export default function UsersPage() {
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          router.push("/login");
          return;
        }

        // Fetch current user
        const { data: userData, error: userError } = await supabase
          .from("users")
          .select("id, email, role, subscribed")
          .eq("id", session.user.id)
          .single();
        console.log("Current user data:", userData); // Debug log
        if (userError || !userData || userData.role !== "admin") {
          router.push("/dashboard");
          return;
        }
        if (mounted) {
          setCurrentUser(userData);
        }

        // Fetch all users
        const { data: usersData, error: fetchError } = await supabase
          .from("users")
          .select("id, email, subscribed, created_at, role");
        console.log("All users data:", usersData); // Debug log
        if (fetchError) {
          throw new Error(fetchError.message);
        }
        if (mounted) {
          setUsers(usersData as User[]);
          setLoading(false);
        }
      } catch (err) {
        if (mounted) {
          setError(err instanceof Error ? err.message : "Failed to load users");
          setLoading(false);
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [router]);

  const toggleSubscription = async (userId: string, currentStatus: boolean) => {
    if (!currentUser || currentUser.role !== "admin") {
      alert("Unauthorized");
      return;
    }

    try {
      const { error } = await supabase
        .from("users")
        .update({ subscribed: !currentStatus })
        .eq("id", userId);
      if (error) throw error;

      // Update local state
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.id === userId ? { ...user, subscribed: !currentStatus } : user
        )
      );
    } catch (err) {
      console.error("Error updating subscription:", err);
      alert("Failed to update subscription");
    }
  };

  if (loading) {
    return <div>Loading users...</div>;
  }

  if (error) {
    return <div className="text-destructive">{error}</div>;
  }

  return <UsersClient users={users} toggleSubscription={toggleSubscription} />;
}













"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { supabase } from "@/lib/supabase";
import { User } from "@/types/types";
import UsersClient from "./UsersClient";

export default function UsersPage() {
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          router.push("/login");
          return;
        }

        // Fetch current user
        const { data: userData, error: userError } = await supabase
          .from("users")
          .select("id, email, role, subscribed")
          .eq("id", session.user.id)
          .single();
        if (userError || !userData || userData.role !== "admin") {
          router.push("/dashboard");
          return;
        }
        if (mounted) {
          setCurrentUser(userData);
        }

        // Fetch all users
        const { data: usersData, error: fetchError } = await supabase
          .from("users")
          .select("id, email, subscribed, created_at, role");
        console.log("Fetched users data:", usersData); // Debug log
        if (fetchError) {
          throw new Error(fetchError.message);
        }
        if (mounted) {
          setUsers(usersData as User[]);
          setLoading(false);
        }
      } catch (err) {
        if (mounted) {
          setError(err instanceof Error ? err.message : "Failed to load users");
          setLoading(false);
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [router]);

  const toggleSubscription = async (userId: string, currentStatus: boolean) => {
    if (!currentUser || currentUser.role !== "admin") {
      alert("Unauthorized");
      return;
    }

    try {
      const { error } = await supabase
        .from("users")
        .update({ subscribed: !currentStatus })
        .eq("id", userId);
      if (error) throw error;

      // Update local state
      setUsers((prevUsers) =>
        prevUsers.map((user) =>
          user.id === userId ? { ...user, subscribed: !currentStatus } : user
        )
      );
    } catch (err) {
      console.error("Error updating subscription:", err);
      alert("Failed to update subscription");
    }
  };

  if (loading) {
    return <div>Loading users...</div>;
  }

  if (error) {
    return <div className="text-destructive">{error}</div>;
  }

  return <UsersClient users={users} toggleSubscription={toggleSubscription} />;
}










"use client"
import { useEffect, useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Plus, Edit, Calendar, BookOpen, Layers, Trash2, Users } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { useRouter } from "next/navigation"
import { useStore } from "@/utils/store"
import { supabase } from "@/lib/supabase"
import { useToast } from "@/hooks/use-toast"

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid")
  const {
    books,
    user,
    issues,
    loading,
    error,
    fetchBooks,
    fetchIssues,
    fetchUser,
    clearBooks,
  } = useStore();
  const router = useRouter();
  const { toast } = useToast();

  // Run auth and books fetch only once on mount
  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user && mounted) {
          await fetchUser();
        }
        if (mounted) {
          await fetchBooks();
        }
      } catch (err) {
        console.error('Error checking auth:', err);
        if (mounted) {
          clearBooks();
          router.push('/login');
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [fetchBooks, fetchUser, clearBooks, router]);

  // Fetch issues only when books change and avoid re-fetching existing issues
  useEffect(() => {
    if (books.length > 0) {
      books.forEach((book) => {
        if (!issues[book.id]) {
          fetchIssues(book.id);
        }
      });
    }
  }, [books, fetchIssues]);

  // Log state changes for debugging (remove in production)
  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, issues, error, user]);

  // Delete book handler
  const handleDeleteBook = async (bookId: string) => {
    if (!user || user.role !== 'admin') {
      toast({
        title: 'Unauthorized',
        description: 'Only admins can delete books.',
        variant: 'destructive',
      });
      return;
    }

    if (!confirm(`Are you sure you want to delete the book "${books.find((b) => b.id === bookId)?.name}"? This will also delete all associated issues.`)) {
      return;
    }

    try {
      // Delete all issues associated with the book first
      await supabase.from('comic_issues').delete().eq('book_id', bookId);

      // Delete the book
      const { error } = await supabase.from('books').delete().eq('id', bookId);

      if (error) throw error;

      // Refresh the store
      await fetchBooks();
      toast({
        title: 'Book Deleted!',
        description: 'The book and its issues have been successfully deleted.',
        duration: 5000,
      });
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete book',
        variant: 'destructive',
      });
    }
  };

  // Delete issue handler
  const handleDeleteIssue = async (issueId: string, bookId: string) => {
    if (!user || user.role !== 'admin') {
      toast({
        title: 'Unauthorized',
        description: 'Only admins can delete issues.',
        variant: 'destructive',
      });
      return;
    }

    if (!confirm(`Are you sure you want to delete issue "${issues[bookId].find((i) => i.id === issueId)?.title}"?`)) {
      return;
    }

    try {
      const { error } = await supabase.from('comic_issues').delete().eq('id', issueId);

      if (error) throw error;

      // Refresh issues for the book
      await fetchIssues(bookId);
      toast({
        title: 'Issue Deleted!',
        description: 'The issue has been successfully deleted.',
        duration: 5000,
      });
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete issue',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
          {user?.role === 'admin' && (
            <Link href="/dashboard/users">
              <Button className="comic-button gap-2">
                <Users className="h-5 w-5" />
                <span>MANAGE USERS</span>
              </Button>
            </Link>
          )}
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button size="icon" variant="ghost">
                          <Edit className="h-5 w-5" />
                        </Button>
                      </Link>
                      {user?.role === 'admin' && (
                        <Button
                          size="icon"
                          variant="ghost"
                          className="text-destructive hover:text-destructive"
                          onClick={() => handleDeleteBook(book.id)}
                        >
                          <Trash2 className="h-5 w-5" />
                        </Button>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <div className="flex gap-2">
                                {user?.role === 'admin' && (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="text-destructive hover:text-destructive"
                                    onClick={() => handleDeleteIssue(issue.id, book.id)}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                )}
                              </div>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div key={book.id} className="p-4 flex flex-col gap-4">
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                      {user?.role === 'admin' && (
                        <Button
                          variant="outline"
                          className="text-destructive hover:text-destructive"
                          onClick={() => handleDeleteBook(book.id)}
                        >
                          <Trash2 className="h-4 w-4 mr-1" />
                          DELETE
                        </Button>
                      )}
                    </div>
                  </div>

                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <div className="flex gap-2">
                                {user?.role === 'admin' && (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="text-destructive hover:text-destructive"
                                    onClick={() => handleDeleteIssue(issue.id, book.id)}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                )}
                              </div>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  )
}









"use client"

import type React from "react";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { LoginFormData, loginSchema } from "@/schema/auth";
import { zodResolver } from "@hookform/resolvers/zod";
import { supabase } from "@/lib/supabase";
import { Session } from "@supabase/supabase-js";

export default function LoginPage() {
  const [session, setSession] = useState<Session | null>(null);
  const [isLoadingSession, setIsLoadingSession] = useState(true);
  const router = useRouter();
  const { toast } = useToast();

  const {
    control,
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "", // Added password field
    },
  });

  // Check initial session state
  useEffect(() => {
    const fetchSession = async () => {
      const { data, error } = await supabase.auth.getSession();
      if (error) {
        console.error("Error fetching session:", error);
        setIsLoadingSession(false);
        return;
      }
      setSession(data.session);
      setIsLoadingSession(false);

      // If user is logged in, redirect to dashboard
      if (data.session) {
        router.push("/dashboard");
      }
    };

    fetchSession();

    // Listen for auth state changes (simplified for password-based login)
    const { data: authListener } = supabase.auth.onAuthStateChange((event, newSession) => {
      setSession(newSession);
      if (event === "SIGNED_IN") {
        router.push("/dashboard");
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const onSubmit = async (data: LoginFormData) => {
    try {
      console.log("Starting login process with data:", data);

      // Sign in with email and password
      const { data: authData, error } = await supabase.auth.signInWithPassword({
        email: data.email,
        password: data.password,
      });

      if (error) throw error;
      console.log("Supabase Auth response:", authData);

      // Check if user and session are returned
      const { user, session } = authData;
      if (!user || !session) {
        throw new Error("Failed to retrieve user session after login");
      }

      // Success message and redirect (handled by useEffect listener)
      toast({
        title: "LOGIN SUCCESSFUL!",
        description: `Welcome back, ${user.email}!`,
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Failed to log in";
      toast({
        title: "LOGIN ERROR",
        description: errorMessage,
        variant: "destructive",
        duration: 5000,
      });
      console.error("Login error:", err);
    }
  };

  if (isLoadingSession) {
    return <div>Loading...</div>;
  }

  const isLoggedIn = !!session;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <div className="w-full max-w-md">
        <div className="speech-bubble mb-6 mx-auto w-fit">
          <h2 className="comic-heading text-2xl text-center">ADMIN ONLY!</h2>
        </div>

        <Card className="comic-panel p-6">
          <div className="mb-6 text-center">
            <div className="flex justify-center mb-4">
              <Image
                src="/kingdom-logo.png"
                alt="Kingdom Comics"
                width={100}
                height={100}
                priority
              />
            </div>
            <h1 className="comic-heading text-4xl text-black mb-2">KINGDOM COMICS ADMIN</h1>
            <p className="text-sm text-muted-foreground">
              Enter your credentials to access the admin panel
            </p>
          </div>

          {isLoggedIn && (
            <div className="text-center mb-4">
              <p className="text-green-600">
                You are already logged in as {session?.user.email}.{" "}
                <Button variant="link" onClick={() => supabase.auth.signOut().then(() => router.push("/login"))}>
                  Log out
                </Button>
              </p>
              <Button onClick={() => router.push("/loading-screen")}>Go to Admin Panel</Button>
            </div>
          )}

          {!isLoggedIn && (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-lg">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  {...register("email")}
                  className="border-2 border-black h-12"
                  placeholder="admin@comics.com"
                  required
                />
                {errors.email && (
                  <p className="text-destructive text-sm">{errors.email.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="text-lg">
                  Password
                </Label>
                <Input
                  id="password"
                  type="password"
                  {...register("password")}
                  className="border-2 border-black h-12"
                  placeholder="password"
                  required
                />
                {errors.password && (
                  <p className="text-destructive text-sm">{errors.password.message}</p>
                )}
              </div>

              <Button
                type="submit"
                className="comic-button w-full h-12 text-xl"
                disabled={isSubmitting}
              >
                {isSubmitting ? "LOGGING IN..." : "ACCESS ADMIN PANEL"}
              </Button>

              <div className="text-center mt-4">
                <p className="text-sm text-muted-foreground">
                  Don&apos;t have an account?{" "}
                  <Link href="/signup" className="text-primary font-medium hover:underline">
                    Sign up here
                  </Link>
                </p>
              </div>
            </form>
          )}
        </Card>
      </div>
    </div>
  );
}








"use client"

import type React from "react";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/lib/supabase";

export default function SignupPage() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { toast } = useToast();

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Validate inputs
      if (!formData.name.trim()) {
        throw new Error("Name is required");
      }
      if (!formData.email.trim() || !formData.email.includes("@")) {
        throw new Error("Please enter a valid email address");
      }
      if (!formData.password || formData.password.length < 6) {
        throw new Error("Password must be at least 6 characters long");
      }

      // Sign up the user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password, // Use the user-provided password
        options: {
          data: {
            name: formData.name,
            role: formData.email.includes("admin") ? "admin" : "user", // Match mobile app logic
            subscribed: false,
          },
        },
      });

      if (authError) throw authError;
      console.log("Supabase Auth response:", authData);

      // Since email verification is disabled, the user should be logged in immediately
      const { user, session } = authData;
      if (!user || !session) {
        throw new Error("Failed to retrieve user session after signup");
      }

      // Insert user into the users table
      const { data: existingUser, error: fetchError } = await supabase
        .from("users")
        .select("id")
        .eq("id", user.id)
        .single();

      if (fetchError && fetchError.code !== "PGRST116") throw fetchError;

      if (!existingUser) {
        const userMetadata = user.user_metadata || {};
        const { error: insertError } = await supabase.from("users").insert({
          id: user.id,
          name: userMetadata.name || "Unknown",
          email: user.email,
          image: null,
          role: userMetadata.role || "user",
          subscribed: userMetadata.subscribed || false,
        });
        if (insertError) throw insertError;
        console.log("User record created:", { id: user.id, email: user.email });
      }

      // Show success message and redirect to dashboard
      toast({
        title: "SIGNUP SUCCESSFUL!",
        description: `Welcome to Kingdom Comics, ${formData.name}! You are now logged in.`,
        duration: 5000,
      });
      router.push("/dashboard");
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Failed to sign up";
      setError(errorMessage);
      toast({
        title: "SIGNUP ERROR",
        description: errorMessage,
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <Card className="comic-panel p-6 w-full max-w-md">
        <h1 className="comic-heading text-4xl text-black mb-6 text-center">SIGN UP</h1>
        <form onSubmit={handleSignup} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">Name</Label>
            <Input
              id="name"
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="Your Name"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email" className="text-lg">Email</Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="your@email.com"
              required
            />
            {error && <p className="text-destructive text-sm">{error}</p>}
          </div>
          <div className="space-y-2">
            <Label htmlFor="password" className="text-lg">Password</Label>
            <Input
              id="password"
              type="password"
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="password"
              required
            />
            {error && <p className="text-destructive text-sm">{error}</p>}
          </div>
          <Button
            type="submit"
            className="comic-button w-full h-12 text-xl"
            disabled={isLoading}
          >
            {isLoading ? "SIGNING UP..." : "SIGN UP"}
          </Button>
        </form>
        <p className="text-center mt-4">
          Already have an account?{" "}
          <Link href="/login" className="text-blue-600 hover:underline">
            Log in
          </Link>
        </p>
      </Card>
    </div>
  );
}









//signup
'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';

export default function SignupPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { toast } = useToast();

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Validate inputs
      if (!formData.name.trim()) {
        throw new Error('Name is required');
      }
      if (!formData.email.trim() || !formData.email.includes('@')) {
        throw new Error('Please enter a valid email address');
      }

      // Sign up the user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: Math.random().toString(36).slice(-8), // Temporary password (required by Supabase)
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard', // Use env variable for deployed URL
          data: {
            name: formData.name,
            role: 'user', // Default to 'user'; admins can be assigned manually
            subscribed: false,
          },
        },
      });

      if (authError) throw authError;
      if (!authData.user) throw new Error('No user returned from signup');

      // Insert user into the users table
      const { error: insertError } = await supabase.from('users').insert({
        id: authData.user.id,
        name: formData.name,
        email: formData.email,
        role: 'user', // Default to 'user'
        subscribed: false,
      });

      if (insertError) throw insertError;

      // Send magic link for email verification
      const { error: otpError } = await supabase.auth.signInWithOtp({
        email: formData.email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (otpError) throw otpError;

      toast({
        title: 'SIGNUP SUCCESSFUL!',
        description: `Welcome to Kingdom Comics, ${formData.name}! Check your email for a magic link to log in.`,
        duration: 5000,
      });

      router.push('/login');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to sign up';
      setError(errorMessage);
      toast({
        title: 'SIGNUP ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <Card className="comic-panel p-6 w-full max-w-md">
        <h1 className="comic-heading text-4xl text-black mb-6 text-center">SIGN UP</h1>
        <form onSubmit={handleSignup} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Name
            </Label>
            <Input
              id="name"
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="Your Name"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email" className="text-lg">
              Email
            </Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="your@email.com"
              required
            />
            {error && <p className="text-destructive text-sm">{error}</p>}
          </div>
          <Button type="submit" className="comic-button w-full h-12 text-xl" disabled={isLoading}>
            {isLoading ? 'SIGNING UP...' : 'SIGN UP'}
          </Button>
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Already have an account?{' '}
              <Link href="/login" className="text-primary font-medium hover:underline">
                Login here
              </Link>
            </p>
          </div>
        </form>
      </Card>
    </div>
  );
}

//login
'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { LoginFormData, loginSchema } from '@/schema/auth';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';
import { Session } from '@supabase/supabase-js';

export default function LoginPage() {
  const [isResending, setIsResending] = useState(false);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoadingSession, setIsLoadingSession] = useState(true);
  const router = useRouter();
  const { toast } = useToast();

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    getValues,
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
    },
  });

  // Check initial session state and handle magic link redirect
  useEffect(() => {
    const fetchSession = async () => {
      const { data, error } = await supabase.auth.getSession();
      if (error) {
        console.error('Error fetching session:', error);
        setIsLoadingSession(false);
        return;
      }
      setSession(data.session);
      setIsLoadingSession(false);

      // If user is logged in, redirect to dashboard
      if (data.session) {
        router.push('/dashboard');
      }
    };

    fetchSession();

    // Listen for auth state changes (e.g., after magic link click)
    const { data: authListener } = supabase.auth.onAuthStateChange((event, newSession) => {
      setSession(newSession);
      if (event === 'SIGNED_IN') {
        router.push('/dashboard');
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const onSubmit = async (data: LoginFormData) => {
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: data.email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK SENT!',
        description: 'Check your email for a magic link to log in.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to send magic link';
      toast({
        title: 'LOGIN ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Login error:', err);
    }
  };

  const resendMagicLink = async () => {
    const email = getValues('email');
    if (!email || !email.includes('@')) {
      toast({
        title: 'INVALID EMAIL',
        description: 'Please enter a valid email address to resend the magic link.',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    setIsResending(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK RESENT!',
        description: 'Check your email for the new magic link.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to resend magic link';
      toast({
        title: 'RESEND ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Resend error:', err);
    } finally {
      setIsResending(false);
    }
  };

  if (isLoadingSession) {
    return <div>Loading...</div>;
  }

  const isLoggedIn = !!session;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <div className="w-full max-w-md">
        <div className="speech-bubble mb-6 mx-auto w-fit">
          <h2 className="comic-heading text-2xl text-center">ADMIN ONLY!</h2>
        </div>

        <Card className="comic-panel p-6">
          <div className="mb-6 text-center">
            <div className="flex justify-center mb-4">
              <Image
                src="/kingdom-logo.png"
                alt="Kingdom Comics"
                width={100}
                height={100}
                priority
              />
            </div>
            <h1 className="comic-heading text-4xl text-black mb-2">KINGDOM COMICS ADMIN</h1>
            <p className="text-sm text-muted-foreground">
              Enter your email to access the admin panel
            </p>
          </div>

          {isLoggedIn && (
            <div className="text-center mb-4">
              <p className="text-green-600">
                You are already logged in as {session?.user.email}.{' '}
                <Button
                  variant="link"
                  onClick={() => supabase.auth.signOut().then(() => router.push('/login'))}
                >
                  Log out
                </Button>
              </p>
              <Button onClick={() => router.push('/dashboard')}>Go to Admin Panel</Button>
            </div>
          )}

          {!isLoggedIn && (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-lg">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  {...control.register('email')}
                  className="border-2 border-black h-12"
                  placeholder="admin@comics.com"
                  required
                />
                {errors.email && (
                  <p className="text-destructive text-sm">{errors.email.message}</p>
                )}
              </div>

              <Button
                type="submit"
                className="comic-button w-full h-12 text-xl"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'SENDING MAGIC LINK...' : 'ACCESS ADMIN PANEL'}
              </Button>

              <Button
                type="button"
                onClick={resendMagicLink}
                className="comic-button w-full h-12 text-xl"
                disabled={isResending || isSubmitting}
              >
                {isResending ? 'RESENDING...' : 'RESEND MAGIC LINK'}
              </Button>

              <div className="text-center mt-4">
                <p className="text-sm text-muted-foreground">
                  Don't have an account?{' '}
                  <Link href="/signup" className="text-primary font-medium hover:underline">
                    Sign up here
                  </Link>
                </p>
              </div>
            </form>
          )}
        </Card>
      </div>
    </div>
  );
}










fix for useSearchParams error
'use client';

import type React from 'react';
import { Suspense, useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { BookFormData, bookSchema } from '@/schema/bookSchema';
import { IssueFormData, issueSchema } from '@/schema/issueSchema';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';

function AddComicContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();

  // Form for adding a new comic (books table)
  const bookForm = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  // Form for adding a new issue (comic_issues table)
  const issueForm = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  const coverImage = bookForm.watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('name')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          // Suggest a title based on the parent comic's name
          issueForm.reset({
            issue_number: 1,
            title: `${data.name} #1`,
            storage_path: '',
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, issueForm, toast]);

  // Handle adding a new comic
  const onSubmitComic = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage && data.coverImage.length > 0) {
        const file = data.coverImage[0];
        const fileExt = file.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;

        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, file, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: null,
      });

      if (error) throw error;

      toast({
        title: 'POW! COMIC CREATED!',
        description: `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  // Handle adding a new issue
  const onSubmitIssue = async (data: IssueFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add an issue.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      const { error } = await supabase.from('comic_issues').insert({
        book_id: parentId,
        issue_number: data.issue_number,
        title: data.title,
        storage_path: data.storage_path,
        description: null, // Not used, but included since it's in the table schema
      });

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE ADDED!',
        description: `Issue "${data.title}" has been added`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add issue';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        {parentId ? (
          // Form for adding a new issue
          <form onSubmit={issueForm.handleSubmit(onSubmitIssue)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="issue_number" className="text-lg">
                Issue Number
              </Label>
              <Input
                id="issue_number"
                type="number"
                {...issueForm.register('issue_number', { valueAsNumber: true })}
                className="border-2 border-black h-12"
                placeholder="1"
              />
              {issueForm.formState.errors.issue_number && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.issue_number.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="title" className="text-lg">
                Title
              </Label>
              <Input
                id="title"
                {...issueForm.register('title')}
                className="border-2 border-black h-12"
                placeholder="A7 #1"
              />
              {issueForm.formState.errors.title && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.title.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="storage_path" className="text-lg">
                Storage Path (URL)
              </Label>
              <Input
                id="storage_path"
                {...issueForm.register('storage_path')}
                className="border-2 border-black h-12"
                placeholder="https://s3.us-east-005.backblazeb2.com/..."
              />
              {issueForm.formState.errors.storage_path && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.storage_path.message}
                </p>
              )}
            </div>

            <div className="pt-4 flex justify-end gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button
                type="submit"
                className="comic-button gap-2"
                disabled={issueForm.formState.isSubmitting}
              >
                <Save className="h-5 w-5" />
                {issueForm.formState.isSubmitting ? 'SAVING...' : 'PUBLISH ISSUE'}
              </Button>
            </div>
          </form>
        ) : (
          // Form for adding a new comic
          <form onSubmit={bookForm.handleSubmit(onSubmitComic)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-lg">
                Title
              </Label>
              <Input
                id="name"
                {...bookForm.register('name')}
                className="border-2 border-black h-12"
                placeholder="The Anointed 7"
              />
              {bookForm.formState.errors.name && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.name.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="description" className="text-lg">
                Description
              </Label>
              <Textarea
                id="description"
                {...bookForm.register('description')}
                className="border-2 border-black min-h-[120px]"
                placeholder="Enter a description of the comic..."
              />
              {bookForm.formState.errors.description && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.description.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="price" className="text-lg">
                Price (USD)
              </Label>
              <Input
                id="price"
                {...bookForm.register('price', { valueAsNumber: true })}
                type="number"
                step="0.01"
                className="border-2 border-black h-12"
                placeholder="5.00"
              />
              {bookForm.formState.errors.price && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.price.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="index" className="text-lg">
                Issue Index (for comic issues, optional)
              </Label>
              <Input
                id="index"
                {...bookForm.register('index', { valueAsNumber: true })}
                type="number"
                className="border-2 border-black h-12"
                placeholder="1"
              />
              {bookForm.formState.errors.index && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.index.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="category" className="text-lg">
                Category
              </Label>
              <Select
                onValueChange={(value) => bookForm.setValue('category', value)}
                defaultValue="graphic_novel"
              >
                <SelectTrigger className="border-2 border-black h-12">
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                  <SelectItem value="comic_issue">Comic Issue</SelectItem>
                </SelectContent>
              </Select>
              {bookForm.formState.errors.category && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.category.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="coverImage" className="text-lg">
                Cover Image
              </Label>
              <Input
                id="coverImage"
                type="file"
                accept="image/jpeg,image/png"
                {...bookForm.register('coverImage', { required: false })}
                className="border-2 border-black h-12"
              />
              {bookForm.formState.errors.coverImage && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.coverImage.message as string}
                </p>
              )}
              {coverImage && coverImage.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-muted-foreground">Selected: {coverImage[0].name}</p>
                </div>
              )}
              <p className="text-xs text-muted-foreground">
                Recommended size: 800x1200px. Max file size: 5MB.
              </p>
            </div>

            <div className="pt-4 flex justify-end gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button
                type="submit"
                className="comic-button gap-2"
                disabled={bookForm.formState.isSubmitting}
              >
                <Save className="h-5 w-5" />
                {bookForm.formState.isSubmitting ? 'SAVING...' : 'PUBLISH COMIC'}
              </Button>
            </div>
          </form>
        )}
      </Card>
    </div>
  );
}

export default function AddComicPage() {
  return (
    <Suspense fallback={<div className="min-h-screen flex items-center justify-center">Loading...</div>}>
      <AddComicContent />
    </Suspense>
  );
}



//signup page
'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';

export default function SignupPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { toast } = useToast();

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // Validate inputs
      if (!formData.name.trim()) {
        throw new Error('Name is required');
      }
      if (!formData.email.trim() || !formData.email.includes('@')) {
        throw new Error('Please enter a valid email address');
      }

      // Sign up the user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: Math.random().toString(36).slice(-8), // Temporary password (required by Supabase)
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard', // Use env variable for deployed URL
          data: {
            name: formData.name,
            role: 'user', // Default to 'user'; admins can be assigned manually
            subscribed: false,
          },
        },
      });

      if (authError) throw authError;
      if (!authData.user) throw new Error('No user returned from signup');

      // Insert user into the users table
      const { error: insertError } = await supabase.from('users').insert({
        id: authData.user.id,
        name: formData.name,
        email: formData.email,
        role: 'user', // Default to 'user'
        subscribed: false,
      });

      if (insertError) throw insertError;

      // Send magic link for email verification
      const { error: otpError } = await supabase.auth.signInWithOtp({
        email: formData.email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (otpError) throw otpError;

      toast({
        title: 'SIGNUP SUCCESSFUL!',
        description: `Welcome to Kingdom Comics, ${formData.name}! Check your email for a magic link to log in.`,
        duration: 5000,
      });

      router.push('/login');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to sign up';
      setError(errorMessage);
      toast({
        title: 'SIGNUP ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <Card className="comic-panel p-6 w-full max-w-md">
        <h1 className="comic-heading text-4xl text-black mb-6 text-center">SIGN UP</h1>
        <form onSubmit={handleSignup} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Name
            </Label>
            <Input
              id="name"
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="Your Name"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email" className="text-lg">
              Email
            </Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              className="border-2 border-black h-12"
              placeholder="your@email.com"
              required
            />
            {error && <p className="text-destructive text-sm">{error}</p>}
          </div>
          <Button type="submit" className="comic-button w-full h-12 text-xl" disabled={isLoading}>
            {isLoading ? 'SIGNING UP...' : 'SIGN UP'}
          </Button>
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Already have an account?{' '}
              <Link href="/login" className="text-primary font-medium hover:underline">
                Login here
              </Link>
            </p>
          </div>
        </form>
      </Card>
    </div>
  );
}


//loging page
'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { LoginFormData, loginSchema } from '@/schema/auth';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';
import { Session } from '@supabase/supabase-js';

export default function LoginPage() {
  const [isResending, setIsResending] = useState(false);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoadingSession, setIsLoadingSession] = useState(true);
  const router = useRouter();
  const { toast } = useToast();

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    getValues,
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
    },
  });

  // Check initial session state and handle magic link redirect
  useEffect(() => {
    const fetchSession = async () => {
      const { data, error } = await supabase.auth.getSession();
      if (error) {
        console.error('Error fetching session:', error);
        setIsLoadingSession(false);
        return;
      }
      setSession(data.session);
      setIsLoadingSession(false);

      // If user is logged in, redirect to dashboard
      if (data.session) {
        router.push('/dashboard');
      }
    };

    fetchSession();

    // Listen for auth state changes (e.g., after magic link click)
    const { data: authListener } = supabase.auth.onAuthStateChange((event, newSession) => {
      setSession(newSession);
      if (event === 'SIGNED_IN') {
        router.push('/dashboard');
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const onSubmit = async (data: LoginFormData) => {
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: data.email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK SENT!',
        description: 'Check your email for a magic link to log in.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to send magic link';
      toast({
        title: 'LOGIN ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Login error:', err);
    }
  };

  const resendMagicLink = async () => {
    const email = getValues('email');
    if (!email || !email.includes('@')) {
      toast({
        title: 'INVALID EMAIL',
        description: 'Please enter a valid email address to resend the magic link.',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    setIsResending(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: process.env.NEXT_PUBLIC_APP_URL
            ? `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
            : 'http://localhost:3000/dashboard',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK RESENT!',
        description: 'Check your email for the new magic link.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to resend magic link';
      toast({
        title: 'RESEND ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Resend error:', err);
    } finally {
      setIsResending(false);
    }
  };

  if (isLoadingSession) {
    return <div>Loading...</div>;
  }

  const isLoggedIn = !!session;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <div className="w-full max-w-md">
        <div className="speech-bubble mb-6 mx-auto w-fit">
          <h2 className="comic-heading text-2xl text-center">ADMIN ONLY!</h2>
        </div>

        <Card className="comic-panel p-6">
          <div className="mb-6 text-center">
            <div className="flex justify-center mb-4">
              <Image
                src="/kingdom-logo.png"
                alt="Kingdom Comics"
                width={100}
                height={100}
                priority
              />
            </div>
            <h1 className="comic-heading text-4xl text-black mb-2">KINGDOM COMICS ADMIN</h1>
            <p className="text-sm text-muted-foreground">
              Enter your email to access the admin panel
            </p>
          </div>

          {isLoggedIn && (
            <div className="text-center mb-4">
              <p className="text-green-600">
                You are already logged in as {session?.user.email}.{' '}
                <Button
                  variant="link"
                  onClick={() => supabase.auth.signOut().then(() => router.push('/login'))}
                >
                  Log out
                </Button>
              </p>
              <Button onClick={() => router.push('/dashboard')}>Go to Admin Panel</Button>
            </div>
          )}

          {!isLoggedIn && (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-lg">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  {...control.register('email')}
                  className="border-2 border-black h-12"
                  placeholder="admin@comics.com"
                  required
                />
                {errors.email && (
                  <p className="text-destructive text-sm">{errors.email.message}</p>
                )}
              </div>

              <Button
                type="submit"
                className="comic-button w-full h-12 text-xl"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'SENDING MAGIC LINK...' : 'ACCESS ADMIN PANEL'}
              </Button>

              <Button
                type="button"
                onClick={resendMagicLink}
                className="comic-button w-full h-12 text-xl"
                disabled={isResending || isSubmitting}
              >
                {isResending ? 'RESENDING...' : 'RESEND MAGIC LINK'}
              </Button>

              <div className="text-center mt-4">
                <p className="text-sm text-muted-foreground">
                  Don't have an account?{' '}
                  <Link href="/signup" className="text-primary font-medium hover:underline">
                    Sign up here
                  </Link>
                </p>
              </div>
            </form>
          )}
        </Card>
      </div>
    </div>
  );
}

use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers, Trash2 } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useRouter } from 'next/navigation';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';
import { Book } from '@/types/types';
import { useToast } from '@/components/ui/use-toast'; // Adjust import based on your setup

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const { books, user, issues, loading, error, fetchBooks, fetchIssues, fetchUser, clearBooks } = useStore();
  const router = useRouter();
  const { toast } = useToast();

  // Run auth and books fetch only once on mount
  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user && mounted) {
          await fetchUser();
        }
        if (mounted) {
          await fetchBooks();
        }
      } catch (err) {
        console.error('Error checking auth:', err);
        if (mounted) {
          clearBooks();
          router.push('/login');
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [fetchBooks, fetchUser, clearBooks, router]);

  // Fetch issues only when books change and avoid re-fetching existing issues
  useEffect(() => {
    if (books.length > 0) {
      books.forEach((book) => {
        if (!issues[book.id]) {
          fetchIssues(book.id);
        }
      });
    }
  }, [books, fetchIssues]);

  // Log state changes for debugging (remove in production)
  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, issues, error, user]);

  // Delete book handler
  const handleDeleteBook = async (bookId: string) => {
    if (!user || user.role !== 'admin') {
      toast({
        title: 'Unauthorized',
        description: 'Only admins can delete books.',
        variant: 'destructive',
      });
      return;
    }

    if (!confirm(`Are you sure you want to delete the book "${books.find((b) => b.id === bookId)?.name}"? This will also delete all associated issues.`)) {
      return;
    }

    try {
      // Delete all issues associated with the book first
      await supabase.from('comic_issues').delete().eq('book_id', bookId);

      // Delete the book
      const { error } = await supabase.from('books').delete().eq('id', bookId);

      if (error) throw error;

      // Refresh the store
      await fetchBooks();
      toast({
        title: 'Book Deleted!',
        description: 'The book and its issues have been successfully deleted.',
        duration: 5000,
      });
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete book',
        variant: 'destructive',
      });
    }
  };

  // Delete issue handler
  const handleDeleteIssue = async (issueId: string, bookId: string) => {
    if (!user || user.role !== 'admin') {
      toast({
        title: 'Unauthorized',
        description: 'Only admins can delete issues.',
        variant: 'destructive',
      });
      return;
    }

    if (!confirm(`Are you sure you want to delete issue "${issues[bookId].find((i) => i.id === issueId)?.title}"?`)) {
      return;
    }

    try {
      const { error } = await supabase.from('comic_issues').delete().eq('id', issueId);

      if (error) throw error;

      // Refresh issues for the book
      await fetchIssues(bookId);
      toast({
        title: 'Issue Deleted!',
        description: 'The issue has been successfully deleted.',
        duration: 5000,
      });
    } catch (err) {
      toast({
        title: 'Error',
        description: err instanceof Error ? err.message : 'Failed to delete issue',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button size="icon" variant="ghost">
                          <Edit className="h-5 w-5" />
                        </Button>
                      </Link>
                      {user?.role === 'admin' && (
                        <Button
                          size="icon"
                          variant="ghost"
                          className="text-destructive hover:text-destructive"
                          onClick={() => handleDeleteBook(book.id)}
                        >
                          <Trash2 className="h-5 w-5" />
                        </Button>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <div className="flex gap-2">
                                <Link href={`/dashboard/edit/${issue.id}`}>
                                  <Button size="sm" variant="outline" className="comic-button">
                                    Edit
                                  </Button>
                                </Link>
                                {user?.role === 'admin' && (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="text-destructive hover:text-destructive"
                                    onClick={() => handleDeleteIssue(issue.id, book.id)}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                )}
                              </div>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div key={book.id} className="p-4 flex flex-col gap-4">
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                      {user?.role === 'admin' && (
                        <Button
                          variant="outline"
                          className="text-destructive hover:text-destructive"
                          onClick={() => handleDeleteBook(book.id)}
                        >
                          <Trash2 className="h-4 w-4 mr-1" />
                          DELETE
                        </Button>
                      )}
                    </div>
                  </div>

                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <div className="flex gap-2">
                                <Link href={`/dashboard/edit/${issue.id}`}>
                                  <Button size="sm" variant="outline" className="comic-button">
                                    Edit
                                  </Button>
                                </Link>
                                {user?.role === 'admin' && (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="text-destructive hover:text-destructive"
                                    onClick={() => handleDeleteIssue(issue.id, book.id)}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                )}
                              </div>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}













//to stop the re-render
'use client';
import { useEffect, useState, useCallback } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useRouter } from 'next/navigation';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';
import { Book } from '@/types/types';
import { shallow } from 'zustand/shallow'; // Import shallow for equality comparison

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Use a selector to subscribe only to specific parts of the state
  const { books, user, issues, loading, error } = useStore(
    (state) => ({
      books: state.books,
      user: state.user,
      issues: state.issues,
      loading: state.loading,
      error: state.error,
    }),
    shallow // Use shallow equality to prevent re-renders on deep object changes
  );

  const { fetchBooks, fetchIssues, fetchUser, clearBooks } = useStore(
    (state) => ({
      fetchBooks: state.fetchBooks,
      fetchIssues: state.fetchIssues,
      fetchUser: state.fetchUser,
      clearBooks: state.clearBooks,
    }),
    shallow
  );

  const router = useRouter();

  // Run auth and books fetch only once on mount
  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user && mounted) {
          await fetchUser();
        }
        if (mounted) {
          await fetchBooks();
        }
      } catch (err) {
        console.error('Error checking auth:', err);
        if (mounted) {
          clearBooks();
          router.push('/login');
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false;
    };
  }, [fetchBooks, fetchUser, clearBooks, router]);

  // Fetch issues for all books in a single batch
  useEffect(() => {
    if (books.length > 0) {
      const booksToFetch = books.filter((book) => !issues[book.id]);
      if (booksToFetch.length > 0) {
        Promise.all(booksToFetch.map((book) => fetchIssues(book.id))).catch((err) =>
          console.error('Error fetching issues:', err)
        );
      }
    }
  }, [books, fetchIssues]); // Only depends on books and fetchIssues

  // Log state changes for debugging (run only once or remove in production)
  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books]); // Only log when books change to reduce spam

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <Link href={`/dashboard/edit/${book.id}`}>
                      <Button size="icon" variant="ghost">
                        <Edit className="h-5 w-5" />
                      </Button>
                    </Link>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div key={book.id} className="p-4 flex flex-col gap-4">
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                    </div>
                  </div>

                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}




'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useRouter } from 'next/navigation';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';
import { Book } from '@/types/types';

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const { books, user, issues, loading, error, fetchBooks, fetchIssues, fetchUser, clearBooks } = useStore();
  const router = useRouter();

  // Run auth and books fetch only once on mount
  useEffect(() => {
    let mounted = true;

    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user && mounted) {
          await fetchUser();
        }
        if (mounted) {
          await fetchBooks();
        }
      } catch (err) {
        console.error('Error checking auth:', err);
        if (mounted) {
          clearBooks();
          router.push('/login');
        }
      }
    };

    checkAuthAndFetchData();

    return () => {
      mounted = false; // Cleanup to prevent state updates on unmounted component
    };
  }, [fetchBooks, fetchUser, clearBooks, router]); // Remove 'user' from dependencies

  // Fetch issues only when books change and avoid re-fetching existing issues
  useEffect(() => {
    if (books.length > 0) {
      books.forEach((book) => {
        if (!issues[book.id]) {
          fetchIssues(book.id);
        }
      });
    }
  }, [books, fetchIssues]); // Remove 'issues' from dependencies to break the loop

  // Log state changes for debugging (remove in production)
  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, issues, error, user]); // Keep this for now to monitor

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <Link href={`/dashboard/edit/${book.id}`}>
                      <Button size="icon" variant="ghost">
                        <Edit className="h-5 w-5" />
                      </Button>
                    </Link>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div key={book.id} className="p-4 flex flex-col gap-4">
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>
                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                    </div>
                  </div>

                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}









'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const issueSchema = z.object({
  issue_number: z.number().int('Issue number must be an integer').min(1, 'Issue number must be at least 1'),
  title: z.string().min(1, 'Title is required').max(255, 'Title must be 255 characters or less'),
  storage_path: z.string().url('Must be a valid URL').optional(),
});

type IssueFormData = z.infer<typeof issueSchema>;

export default function EditIssuePage() {
  const router = useRouter();
  const params = useParams();
  const { issueId } = params as { issueId: string };
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [issue, setIssue] = useState<any | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  useEffect(() => {
    console.log('Fetching issue with issueId:', issueId); // Log the issueId
    const fetchIssue = async () => {
      setIsLoading(true);
      try {
        const { data, error, count } = await supabase
          .from('comic_issues') // Explicitly confirm this is comic_issues
          .select('*', { count: 'exact' })
          .eq('id', issueId)
          .single();

        console.log('Query URL:', supabase.rpcUrl); // Log the base URL to confirm
        console.log('Query result:', { data, error, count }); // Log the result
        if (error && error.code !== 'PGRST116') throw error;
        if (!data) {
          throw new Error(`No issue found with ID: ${issueId}`);
        }

        setIssue(data);
        reset({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path || '',
        });
      } catch (err) {
        console.error('Fetch error details:', err); // Log full error
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to load issue',
          variant: 'destructive',
        });
        router.push('/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchIssue();
  }, [issueId, router, toast, reset]);

  const onSubmit = async (data: IssueFormData) => {
    try {
      setIsLoading(true);

      const { error } = await supabase
        .from('comic_issues')
        .update({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
          updated_at: new Date().toISOString(),
        })
        .eq('id', issueId);

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE UPDATED!',
        description: `"${data.title}" has been updated successfully`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      toast({
        title: 'ERROR',
        description: err instanceof Error ? err.message : 'Failed to update issue',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this issue?')) {
      try {
        setIsLoading(true);

        if (issue?.storage_path) {
          console.log('Delete storage_path not implemented for Backblaze:', issue.storage_path);
        }

        const { error } = await supabase
          .from('comic_issues')
          .delete()
          .eq('id', issueId);

        if (error) throw error;

        toast({
          title: 'ISSUE DELETED!',
          description: `"${issue?.title}" has been removed`,
          duration: 5000,
        });

        router.push('/dashboard');
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to delete issue',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  if (isLoading || !issue) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <div>
          <h1 className="comic-heading text-4xl text-black">EDIT ISSUE</h1>
          <p className="text-muted-foreground">{issue.title}</p>
        </div>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="issue_number" className="text-lg">
              Issue Number
            </Label>
            <Input
              id="issue_number"
              type="number"
              {...register('issue_number', { valueAsNumber: true })}
              className="border-2 border-black h-12"
            />
            {errors.issue_number && (
              <p className="text-destructive text-sm">{errors.issue_number.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-lg">
              Title
            </Label>
            <Input
              id="title"
              {...register('title')}
              className="border-2 border-black h-12"
            />
            {errors.title && <p className="text-destructive text-sm">{errors.title.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="storage_path" className="text-lg">
              Storage Path (URL)
            </Label>
            <Input
              id="storage_path"
              {...register('storage_path')}
              className="border-2 border-black h-12"
            />
            {errors.storage_path && (
              <p className="text-destructive text-sm">{errors.storage_path.message}</p>
            )}
          </div>

          <div className="pt-4 flex justify-between">
            <Button
              type="button"
              variant="outline"
              className="comic-button gap-2 text-destructive hover:text-destructive"
              onClick={handleDelete}
              disabled={isLoading || isSubmitting}
            >
              <Trash2 className="h-5 w-5" />
              DELETE
            </Button>

            <div className="flex gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button type="submit" className="comic-button gap-2" disabled={isLoading || isSubmitting}>
                <Save className="h-5 w-5" />
                {isSubmitting || isLoading ? 'SAVING...' : 'SAVE CHANGES'}
              </Button>
            </div>
          </div>
        </form>
      </Card>
    </div>
  );
}










'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const issueSchema = z.object({
  issue_number: z.number().int('Issue number must be an integer').min(1, 'Issue number must be at least 1'),
  title: z.string().min(1, 'Title is required').max(255, 'Title must be 255 characters or less'),
  storage_path: z.string().url('Must be a valid URL').optional(),
});

type IssueFormData = z.infer<typeof issueSchema>;

export default function EditIssuePage() {
  const router = useRouter();
  const params = useParams();
  const { issueId } = params as { issueId: string };
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [issue, setIssue] = useState<any | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  useEffect(() => {
    console.log('Fetching issue with issueId:', issueId); // Log the issueId
    const fetchIssue = async () => {
      setIsLoading(true);
      try {
        const { data, error, count } = await supabase
          .from('comic_issues') // Explicitly set to comic_issues
          .select('*', { count: 'exact' })
          .eq('id', issueId)
          .single();

        console.log('Query result:', { data, error, count }); // Log the result
        if (error && error.code !== 'PGRST116') throw error;
        if (!data) {
          throw new Error('No issue found with the given ID');
        }

        setIssue(data);
        reset({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path || '',
        });
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to load issue',
          variant: 'destructive',
        });
        router.push('/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchIssue();
  }, [issueId, router, toast, reset]);

  const onSubmit = async (data: IssueFormData) => {
    try {
      setIsLoading(true);

      const { error } = await supabase
        .from('comic_issues')
        .update({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
          updated_at: new Date().toISOString(),
        })
        .eq('id', issueId);

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE UPDATED!',
        description: `"${data.title}" has been updated successfully`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      toast({
        title: 'ERROR',
        description: err instanceof Error ? err.message : 'Failed to update issue',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this issue?')) {
      try {
        setIsLoading(true);

        if (issue?.storage_path) {
          console.log('Delete storage_path not implemented for Backblaze:', issue.storage_path);
        }

        const { error } = await supabase
          .from('comic_issues')
          .delete()
          .eq('id', issueId);

        if (error) throw error;

        toast({
          title: 'ISSUE DELETED!',
          description: `"${issue?.title}" has been removed`,
          duration: 5000,
        });

        router.push('/dashboard');
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to delete issue',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  if (isLoading || !issue) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <div>
          <h1 className="comic-heading text-4xl text-black">EDIT ISSUE</h1>
          <p className="text-muted-foreground">{issue.title}</p>
        </div>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="issue_number" className="text-lg">
              Issue Number
            </Label>
            <Input
              id="issue_number"
              type="number"
              {...register('issue_number', { valueAsNumber: true })}
              className="border-2 border-black h-12"
            />
            {errors.issue_number && (
              <p className="text-destructive text-sm">{errors.issue_number.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-lg">
              Title
            </Label>
            <Input
              id="title"
              {...register('title')}
              className="border-2 border-black h-12"
            />
            {errors.title && <p className="text-destructive text-sm">{errors.title.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="storage_path" className="text-lg">
              Storage Path (URL)
            </Label>
            <Input
              id="storage_path"
              {...register('storage_path')}
              className="border-2 border-black h-12"
            />
            {errors.storage_path && (
              <p className="text-destructive text-sm">{errors.storage_path.message}</p>
            )}
          </div>

          <div className="pt-4 flex justify-between">
            <Button
              type="button"
              variant="outline"
              className="comic-button gap-2 text-destructive hover:text-destructive"
              onClick={handleDelete}
              disabled={isLoading || isSubmitting}
            >
              <Trash2 className="h-5 w-5" />
              DELETE
            </Button>

            <div className="flex gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button type="submit" className="comic-button gap-2" disabled={isLoading || isSubmitting}>
                <Save className="h-5 w-5" />
                {isSubmitting || isLoading ? 'SAVING...' : 'SAVE CHANGES'}
              </Button>
            </div>
          </div>
        </form>
      </Card>
    </div>
  );
}








{bookIssues.map((issue) => (
  <div
    key={issue.id}
    className="border-l-2 border-muted pl-2 text-sm"
  >
    <div className="flex justify-between items-center">
      <div>
        <span className="font-medium">Issue #{issue.issue_number}</span>
      </div>
      <Link href={`/dashboard/edit/${issue.id}`}>
        <Button size="sm" variant="outline" className="comic-button">
          Edit
        </Button>
      </Link>
    </div>
    <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
    {console.log('Issue ID for edit:', issue.id)} {/* Add this */}
  </div>
))}

'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const issueSchema = z.object({
  issue_number: z.number().int('Issue number must be an integer').min(1, 'Issue number must be at least 1'),
  title: z.string().min(1, 'Title is required').max(255, 'Title must be 255 characters or less'),
  storage_path: z.string().url('Must be a valid URL').optional(),
});

type IssueFormData = z.infer<typeof issueSchema>;

export default function EditIssuePage() {
  const router = useRouter();
  const params = useParams();
  const { issueId } = params as { issueId: string };
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [issue, setIssue] = useState<any | null>(null); // Use a broader type temporarily

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  useEffect(() => {
    console.log('Fetching issue with issueId:', issueId); // Log the issueId
    const fetchIssue = async () => {
      setIsLoading(true);
      try {
        const { data, error, count } = await supabase
          .from('comic_issues')
          .select('*', { count: 'exact' }) // Add count to debug
          .eq('id', issueId)
          .single();

        console.log('Query result:', { data, error, count }); // Log the result
        if (error) throw error;

        if (!data) {
          throw new Error('No issue found with the given ID');
        }

        setIssue(data);
        reset({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
        });
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to load issue',
          variant: 'destructive',
        });
        router.push('/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchIssue();
  }, [issueId, router, toast, reset]);

  const onSubmit = async (data: IssueFormData) => {
    try {
      setIsLoading(true);

      const { error } = await supabase
        .from('comic_issues')
        .update({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
          updated_at: new Date().toISOString(),
        })
        .eq('id', issueId);

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE UPDATED!',
        description: `"${data.title}" has been updated successfully`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      toast({
        title: 'ERROR',
        description: err instanceof Error ? err.message : 'Failed to update issue',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this issue?')) {
      try {
        setIsLoading(true);

        if (issue?.storage_path) {
          console.log('Delete storage_path not implemented for Backblaze:', issue.storage_path);
        }

        const { error } = await supabase
          .from('comic_issues')
          .delete()
          .eq('id', issueId);

        if (error) throw error;

        toast({
          title: 'ISSUE DELETED!',
          description: `"${issue?.title}" has been removed`,
          duration: 5000,
        });

        router.push('/dashboard');
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to delete issue',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  if (isLoading || !issue) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <div>
          <h1 className="comic-heading text-4xl text-black">EDIT ISSUE</h1>
          <p className="text-muted-foreground">{issue.title}</p>
        </div>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="issue_number" className="text-lg">
              Issue Number
            </Label>
            <Input
              id="issue_number"
              type="number"
              {...register('issue_number', { valueAsNumber: true })}
              className="border-2 border-black h-12"
            />
            {errors.issue_number && (
              <p className="text-destructive text-sm">{errors.issue_number.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-lg">
              Title
            </Label>
            <Input
              id="title"
              {...register('title')}
              className="border-2 border-black h-12"
            />
            {errors.title && <p className="text-destructive text-sm">{errors.title.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="storage_path" className="text-lg">
              Storage Path (URL)
            </Label>
            <Input
              id="storage_path"
              {...register('storage_path')}
              className="border-2 border-black h-12"
            />
            {errors.storage_path && (
              <p className="text-destructive text-sm">{errors.storage_path.message}</p>
            )}
          </div>

          <div className="pt-4 flex justify-between">
            <Button
              type="button"
              variant="outline"
              className="comic-button gap-2 text-destructive hover:text-destructive"
              onClick={handleDelete}
              disabled={isLoading || isSubmitting}
            >
              <Trash2 className="h-5 w-5" />
              DELETE
            </Button>

            <div className="flex gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button type="submit" className="comic-button gap-2" disabled={isLoading || isSubmitting}>
                <Save className="h-5 w-5" />
                {isSubmitting || isLoading ? 'SAVING...' : 'SAVE CHANGES'}
              </Button>
            </div>
          </div>
        </form>
      </Card>
    </div>
  );
}








'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const issueSchema = z.object({
  issue_number: z.number().int('Issue number must be an integer').min(1, 'Issue number must be at least 1'),
  title: z.string().min(1, 'Title is required').max(255, 'Title must be 255 characters or less'),
  storage_path: z.string().url('Must be a valid URL').optional(),
});

type IssueFormData = z.infer<typeof issueSchema>;

export default function EditIssuePage() {
  const router = useRouter();
  const params = useParams();
  const { issueId } = params as { issueId: string };
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [issue, setIssue] = useState<any | null>(null); // Use a broader type temporarily if ComicIssue isn't defined here

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  useEffect(() => {
    console.log('Fetching issue with issueId:', issueId); // Log the issueId
    const fetchIssue = async () => {
      setIsLoading(true);
      try {
        const { data, error } = await supabase
          .from('comic_issues')
          .select('*')
          .eq('id', issueId)
          .single();

        if (error) throw error;

        setIssue(data);
        reset({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
        });
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to load issue',
          variant: 'destructive',
        });
        router.push('/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchIssue();
  }, [issueId, router, toast, reset]);

  const onSubmit = async (data: IssueFormData) => {
    try {
      setIsLoading(true);

      const { error } = await supabase
        .from('comic_issues')
        .update({
          issue_number: data.issue_number,
          title: data.title,
          storage_path: data.storage_path,
          updated_at: new Date().toISOString(),
        })
        .eq('id', issueId);

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE UPDATED!',
        description: `"${data.title}" has been updated successfully`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      toast({
        title: 'ERROR',
        description: err instanceof Error ? err.message : 'Failed to update issue',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this issue?')) {
      try {
        setIsLoading(true);

        if (issue?.storage_path) {
          // Placeholder for Backblaze deletion (not implemented yet)
          console.log('Delete storage_path not implemented for Backblaze:', issue.storage_path);
        }

        const { error } = await supabase
          .from('comic_issues')
          .delete()
          .eq('id', issueId);

        if (error) throw error;

        toast({
          title: 'ISSUE DELETED!',
          description: `"${issue?.title}" has been removed`,
          duration: 5000,
        });

        router.push('/dashboard');
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to delete issue',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  if (isLoading || !issue) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <div>
          <h1 className="comic-heading text-4xl text-black">EDIT ISSUE</h1>
          <p className="text-muted-foreground">{issue.title}</p>
        </div>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="issue_number" className="text-lg">
              Issue Number
            </Label>
            <Input
              id="issue_number"
              type="number"
              {...register('issue_number', { valueAsNumber: true })}
              className="border-2 border-black h-12"
            />
            {errors.issue_number && (
              <p className="text-destructive text-sm">{errors.issue_number.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-lg">
              Title
            </Label>
            <Input
              id="title"
              {...register('title')}
              className="border-2 border-black h-12"
            />
            {errors.title && <p className="text-destructive text-sm">{errors.title.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="storage_path" className="text-lg">
              Storage Path (URL)
            </Label>
            <Input
              id="storage_path"
              {...register('storage_path')}
              className="border-2 border-black h-12"
            />
            {errors.storage_path && (
              <p className="text-destructive text-sm">{errors.storage_path.message}</p>
            )}
          </div>

          <div className="pt-4 flex justify-between">
            <Button
              type="button"
              variant="outline"
              className="comic-button gap-2 text-destructive hover:text-destructive"
              onClick={handleDelete}
              disabled={isLoading || isSubmitting}
            >
              <Trash2 className="h-5 w-5" />
              DELETE
            </Button>

            <div className="flex gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button type="submit" className="comic-button gap-2" disabled={isLoading || isSubmitting}>
                <Save className="h-5 w-5" />
                {isSubmitting || isLoading ? 'SAVING...' : 'SAVE CHANGES'}
              </Button>
            </div>
          </div>
        </form>
      </Card>
    </div>
  );
}

















'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { BookFormData, bookSchema } from '@/schema/bookSchema';
import { IssueFormData, issueSchema } from '@/schema/issueSchema';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();

  // Form for adding a new comic (books table)
  const bookForm = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  // Form for adding a new issue (comic_issues table)
  const issueForm = useForm<IssueFormData>({
    resolver: zodResolver(issueSchema),
    defaultValues: {
      issue_number: 1,
      title: '',
      storage_path: '',
    },
  });

  const coverImage = bookForm.watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('name')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          // Suggest a title based on the parent comic's name
          issueForm.reset({
            issue_number: 1,
            title: `${data.name} #1`,
            storage_path: '',
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, issueForm, toast]);

  // Handle adding a new comic
  const onSubmitComic = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage && data.coverImage.length > 0) {
        const file = data.coverImage[0];
        const fileExt = file.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;

        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, file, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: null,
      });

      if (error) throw error;

      toast({
        title: 'POW! COMIC CREATED!',
        description: `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  // Handle adding a new issue
  const onSubmitIssue = async (data: IssueFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add an issue.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      const { error } = await supabase.from('comic_issues').insert({
        book_id: parentId,
        issue_number: data.issue_number,
        title: data.title,
        storage_path: data.storage_path,
        description: null, // Not used, but included since it's in the table schema
      });

      if (error) throw error;

      toast({
        title: 'BOOM! ISSUE ADDED!',
        description: `Issue "${data.title}" has been added`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add issue';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        {parentId ? (
          // Form for adding a new issue
          <form onSubmit={issueForm.handleSubmit(onSubmitIssue)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="issue_number" className="text-lg">
                Issue Number
              </Label>
              <Input
                id="issue_number"
                type="number"
                {...issueForm.register('issue_number', { valueAsNumber: true })}
                className="border-2 border-black h-12"
                placeholder="1"
              />
              {issueForm.formState.errors.issue_number && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.issue_number.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="title" className="text-lg">
                Title
              </Label>
              <Input
                id="title"
                {...issueForm.register('title')}
                className="border-2 border-black h-12"
                placeholder="A7 #1"
              />
              {issueForm.formState.errors.title && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.title.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="storage_path" className="text-lg">
                Storage Path (URL)
              </Label>
              <Input
                id="storage_path"
                {...issueForm.register('storage_path')}
                className="border-2 border-black h-12"
                placeholder="https://s3.us-east-005.backblazeb2.com/..."
              />
              {issueForm.formState.errors.storage_path && (
                <p className="text-destructive text-sm">
                  {issueForm.formState.errors.storage_path.message}
                </p>
              )}
            </div>

            <div className="pt-4 flex justify-end gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button
                type="submit"
                className="comic-button gap-2"
                disabled={issueForm.formState.isSubmitting}
              >
                <Save className="h-5 w-5" />
                {issueForm.formState.isSubmitting ? 'SAVING...' : 'PUBLISH ISSUE'}
              </Button>
            </div>
          </form>
        ) : (
          // Form for adding a new comic
          <form onSubmit={bookForm.handleSubmit(onSubmitComic)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-lg">
                Title
              </Label>
              <Input
                id="name"
                {...bookForm.register('name')}
                className="border-2 border-black h-12"
                placeholder="The Anointed 7"
              />
              {bookForm.formState.errors.name && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.name.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="description" className="text-lg">
                Description
              </Label>
              <Textarea
                id="description"
                {...bookForm.register('description')}
                className="border-2 border-black min-h-[120px]"
                placeholder="Enter a description of the comic..."
              />
              {bookForm.formState.errors.description && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.description.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="price" className="text-lg">
                Price (USD)
              </Label>
              <Input
                id="price"
                {...bookForm.register('price', { valueAsNumber: true })}
                type="number"
                step="0.01"
                className="border-2 border-black h-12"
                placeholder="5.00"
              />
              {bookForm.formState.errors.price && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.price.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="index" className="text-lg">
                Issue Index (for comic issues, optional)
              </Label>
              <Input
                id="index"
                {...bookForm.register('index', { valueAsNumber: true })}
                type="number"
                className="border-2 border-black h-12"
                placeholder="1"
              />
              {bookForm.formState.errors.index && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.index.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="category" className="text-lg">
                Category
              </Label>
              <Select {...bookForm.register('category')} defaultValue="graphic_novel">
                <SelectTrigger className="border-2 border-black h-12">
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                  <SelectItem value="comic_issue">Comic Issue</SelectItem>
                </SelectContent>
              </Select>
              {bookForm.formState.errors.category && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.category.message}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="coverImage" className="text-lg">
                Cover Image
              </Label>
              <Input
                id="coverImage"
                type="file"
                accept="image/jpeg,image/png"
                {...bookForm.register('coverImage', { required: false })}
                className="border-2 border-black h-12"
              />
              {bookForm.formState.errors.coverImage && (
                <p className="text-destructive text-sm">
                  {bookForm.formState.errors.coverImage.message as string}
                </p>
              )}
              {coverImage && coverImage.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-muted-foreground">Selected: {coverImage[0].name}</p>
                </div>
              )}
              <p className="text-xs text-muted-foreground">
                Recommended size: 800x1200px. Max file size: 5MB.
              </p>
            </div>

            <div className="pt-4 flex justify-end gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button
                type="submit"
                className="comic-button gap-2"
                disabled={bookForm.formState.isSubmitting}
              >
                <Save className="h-5 w-5" />
                {bookForm.formState.isSubmitting ? 'SAVING...' : 'PUBLISH COMIC'}
              </Button>
            </div>
          </form>
        )}
      </Card>
    </div>
  );
}























'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useRouter } from 'next/navigation';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const {
    books,
    user,
    issues,
    loading,
    error,
    fetchBooks,
    fetchIssues,
    fetchUser,
    clearBooks,
  } = useStore();
  const router = useRouter();

  // Fetch user and books on mount
  useEffect(() => {
    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user) {
          await fetchUser();
        }
        await fetchBooks();
      } catch (err) {
        console.error('Error checking auth:', err);
        clearBooks();
        router.push('/login');
      }
    };
    checkAuthAndFetchData();
  }, [fetchBooks, fetchUser, clearBooks, router, user]); // Removed 'books' and 'fetchIssues'

  // Fetch issues once books are loaded
  useEffect(() => {
    if (books.length > 0) {
      books.forEach((book) => {
        // Only fetch issues if we haven't already fetched them for this book
        if (!issues[book.id]) {
          fetchIssues(book.id);
        }
      });
    }
  }, [books, fetchIssues, issues]); // Depend on 'books' to fetch issues after books are loaded

  // Log state changes for debugging (optional, can remove in production)
  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, issues, error, user]);

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <Link href={`/dashboard/edit/${book.id}`}>
                      <Button size="icon" variant="ghost">
                        <Edit className="h-5 w-5" />
                      </Button>
                    </Link>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {/* Display issues under the parent comic */}
                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                                {/* <span className="text-muted-foreground ml-2">
                                  - {new Date(issue.created_at).toLocaleDateString()}
                                </span> */}
                              </div>
                              <Link href={`/dashboard/edit/issue/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div key={book.id} className="p-4 flex flex-col gap-4">
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>

                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                    </div>
                  </div>

                  {/* Display issues under the parent comic */}
                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                                {/* <span className="text-muted-foreground ml-2">
                                  - {new Date(issue.created_at).toLocaleDateString()}
                                </span> */}
                              </div>
                              <Link href={`/dashboard/edit/issue/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}


'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Trash2, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { bookSchema, BookFormData } from '@/schema/bookSchema';

export default function EditComicPage() {
  const router = useRouter();
  const params = useParams();
  const { id } = params as { id: string };
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [comic, setComic] = useState<Book | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 0,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    const fetchComic = async () => {
      setIsLoading(true);
      try {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', id)
          .single();

        if (error) throw error;

        setComic(data as Book);
        reset({
          name: data.name,
          description: data.description,
          price: data.price?.[0]?.price ? parseFloat(data.price[0].price) : 0,
          category: data.category,
        });
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to load comic',
          variant: 'destructive',
        });
        router.push('/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchComic();
  }, [id, router, toast, reset]);

  const onSubmit = async (data: BookFormData) => {
    try {
      setIsLoading(true);

      let coverImageUrl = comic?.Cover_Image || null;
      if (data.coverImage && data.coverImage.length > 0) {
        const file = data.coverImage[0];
        const fileExt = file.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;

        if (comic?.Cover_Image) {
          const oldFileName = comic.Cover_Image.split('/').pop();
          await supabase.storage.from('comic-cover').remove([oldFileName!]);
        }

        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, file, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase
        .from('books')
        .update({
          name: data.name,
          Cover_Image: coverImageUrl,
          description: data.description,
          price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
          category: data.category,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id);

      if (error) throw error;

      toast({
        title: 'ZAP! COMIC UPDATED!',
        description: `"${data.name}" has been updated successfully`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      toast({
        title: 'ERROR',
        description: err instanceof Error ? err.message : 'Failed to update comic',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this comic?')) {
      try {
        setIsLoading(true);

        if (comic?.Cover_Image) {
          const fileName = comic.Cover_Image.split('/').pop();
          await supabase.storage.from('comic-cover').remove([fileName!]);
        }

        const { error } = await supabase
          .from('books')
          .delete()
          .eq('id', id);

        if (error) throw error;

        toast({
          title: 'COMIC DELETED!',
          description: `"${comic?.name}" has been removed from your collection`,
          duration: 5000,
        });

        router.push('/dashboard');
      } catch (err) {
        toast({
          title: 'ERROR',
          description: err instanceof Error ? err.message : 'Failed to delete comic',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  if (isLoading || !comic) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <div>
          <h1 className="comic-heading text-4xl text-black">EDIT COMIC</h1>
          <p className="text-muted-foreground">{comic.name}</p>
        </div>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message as string}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message as string}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message as string}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue={comic.category}>
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message as string}</p>}
          </div>

          <div className="space-y-2">
            <Label className="text-lg">Cover Image</Label>
            <div className="flex flex-col items-center justify-center border-2 border-dashed border-black rounded-lg p-12 text-center">
              {comic.Cover_Image ? (
                <div className="text-center">
                  <img
                    src={comic.Cover_Image}
                    alt="Cover"
                    className="w-32 h-48 object-cover mx-auto mb-4"
                  />
                  <Input
                    id="coverImage"
                    type="file"
                    accept="image/jpeg,image/png"
                    {...register('coverImage', { required: false })}
                    className="border-2 border-black h-12 mt-2"
                  />
                  {errors.coverImage && (
                    <p className="text-destructive text-sm">{errors.coverImage.message as string}</p>
                  )}
                </div>
              ) : (
                <>
                  <Upload className="h-8 w-8 mb-4 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground mb-2">
                    No image uploaded yet. Drag and drop or click to browse.
                  </p>
                  <Input
                    id="coverImage"
                    type="file"
                    accept="image/jpeg,image/png"
                    {...register('coverImage', { required: false })}
                    className="border-2 border-black h-12"
                  />
                  {errors.coverImage && (
                    <p className="text-destructive text-sm">{errors.coverImage.message as string}</p>
                  )}
                </>
              )}
              {coverImage && coverImage.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-muted-foreground">Selected: {coverImage[0].name}</p>
                </div>
              )}
            </div>
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-between">
            <Button
              type="button"
              variant="outline"
              className="comic-button gap-2 text-destructive hover:text-destructive"
              onClick={handleDelete}
              disabled={isLoading || isSubmitting}
            >
              <Trash2 className="h-5 w-5" />
              DELETE
            </Button>

            <div className="flex gap-4">
              <Link href="/dashboard">
                <Button type="button" variant="outline" className="comic-button">
                  CANCEL
                </Button>
              </Link>
              <Button type="submit" className="comic-button gap-2" disabled={isLoading || isSubmitting}>
                <Save className="h-5 w-5" />
                {isSubmitting || isLoading ? 'SAVING...' : 'SAVE CHANGES'}
              </Button>
            </div>
          </div>
        </form>
      </Card>
    </div>
  );
}








'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useRouter } from 'next/navigation';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const { books, issues, user, loading, error, fetchBooks, fetchIssues, fetchUser, clearBooks } = useStore();
  const router = useRouter();

  useEffect(() => {
    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user) {
          await fetchUser();
        }
        await fetchBooks();
        // Fetch issues for all books after fetching books
        books.forEach((book) => fetchIssues(book.id));
      } catch (err) {
        console.error('Error checking auth:', err);
        clearBooks();
        router.push('/login');
      }
    };
    checkAuthAndFetchData();
  }, [fetchBooks, fetchIssues, fetchUser, clearBooks, router, user, books]);

  useEffect(() => {
    console.log('Books:', books);
    console.log('Issues:', issues);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, issues, error, user]);

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="comic-heading text-4xl text-black mb-1">YOUR COMICS</h1>
          <p className="text-muted-foreground">Manage your comic book collection</p>
        </div>

        <div className="flex gap-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            onClick={() => setViewMode('grid')}
            className="comic-button"
          >
            GRID
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            onClick={() => setViewMode('list')}
            className="comic-button"
          >
            LIST
          </Button>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      </div>

      {loading && <div>Loading books...</div>}
      {error && <div className="text-destructive">{error}</div>}

      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book) => {
            const bookIssues = issues[book.id] || [];
            return (
              <Card key={book.id} className="comic-panel overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <Link href={`/dashboard/edit/${book.id}`}>
                      <Button size="icon" variant="ghost">
                        <Edit className="h-5 w-5" />
                      </Button>
                    </Link>
                  </div>

                  <div className="flex items-center text-sm text-muted-foreground mb-4">
                    <Calendar className="h-4 w-4 mr-1" />
                    <span>
                      {book.created_at
                        ? new Date(book.created_at).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>

                  <p className="text-sm line-clamp-3">{book.description}</p>

                  {/* Display issues under the parent comic */}
                  {bookIssues.length > 0 && (
                    <div className="mt-4">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                                <span className="text-muted-foreground ml-2">
                                  - {new Date(issue.created_at).toLocaleDateString()}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/issue/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="bg-muted p-4 border-t border-border flex gap-2">
                  <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                    <Button variant="outline" className="comic-button w-full">
                      EDIT COMIC
                    </Button>
                  </Link>
                  <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                    <Button variant="default" className="comic-button">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </Card>
            );
          })}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book) => {
              const bookIssues = issues[book.id] || [];
              return (
                <div
                  key={book.id}
                  className="p-4 flex flex-col gap-4"
                >
                  <div className="flex flex-col sm:flex-row justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h3 className="comic-heading text-xl">{book.name}</h3>
                      </div>
                      <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                        <Badge variant="outline" className="font-medium">
                          {book.category}
                        </Badge>
                        {bookIssues.length > 0 && (
                          <Badge variant="secondary" className="font-medium flex items-center gap-1">
                            <Layers className="h-3 w-3" />
                            {bookIssues.length} {bookIssues.length === 1 ? 'Issue' : 'Issues'}
                          </Badge>
                        )}
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {book.created_at
                            ? new Date(book.created_at).toLocaleDateString()
                            : 'N/A'}
                        </span>
                      </div>
                    </div>

                    <div className="flex gap-2 shrink-0">
                      <Link href={`/dashboard/add?parent_id=${book.id}`}>
                        <Button variant="outline" className="comic-button">
                          <Plus className="h-4 w-4 mr-1" />
                          ADD ISSUE
                        </Button>
                      </Link>
                      <Link href={`/dashboard/edit/${book.id}`}>
                        <Button className="comic-button">EDIT</Button>
                      </Link>
                    </div>
                  </div>

                  {/* Display issues under the parent comic */}
                  {bookIssues.length > 0 && (
                    <div className="mt-2">
                      <h3 className="text-sm font-semibold text-muted-foreground mb-2">Issues:</h3>
                      <div className="space-y-2 pl-4">
                        {bookIssues.map((issue) => (
                          <div
                            key={issue.id}
                            className="border-l-2 border-muted pl-2 text-sm"
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <span className="font-medium">
                                  Issue #{issue.issue_number}
                                </span>
                                <span className="text-muted-foreground ml-2">
                                  - {new Date(issue.created_at).toLocaleDateString()}
                                </span>
                              </div>
                              <Link href={`/dashboard/edit/issue/${issue.id}`}>
                                <Button size="sm" variant="outline" className="comic-button">
                                  Edit
                                </Button>
                              </Link>
                            </div>
                            <p className="text-muted-foreground line-clamp-1">{issue.title}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </Card>
      )}

      {!loading && !error && books.length === 0 && (
        <div className="text-center py-12">
          <h3 className="comic-heading text-2xl mb-2">NO COMICS YET!</h3>
          <p className="text-muted-foreground mb-6">Add your first comic to get started</p>
          <Link href="/dashboard/add">
            <Button className="comic-button gap-2">
              <Plus className="h-5 w-5" />
              <span>ADD COMIC</span>
            </Button>
          </Link>
        </div>
      )}
    </div>
  );
}











import { create } from 'zustand';
import { supabase } from '@/lib/supabase';

interface Book {
  id: string;
  name: string;
  Cover_Image: string | null;
  description: string;
  price: { price: string; currency: string }[] | null;
  category: string;
  created_at: string;
  updated_at: string;
  parent_id: string | null;


interface ComicIssue {
  id: string;
  book_id: string;
  issue_number: number;
  title: string;
  storage_path: string;
  created_at: string;
  updated_at: string;
}

interface StoreState {
  user: { id: string; email: string } | null;
  books: Book[];
  issues: { [bookId: string]: ComicIssue[] };
  loading: boolean;
  error: string | null;
  fetchUser: () => Promise<void>;
  fetchBooks: () => Promise<void>;
  fetchIssues: (bookId: string) => Promise<void>;
  clearBooks: () => void;
}

export const useStore = create<StoreState>((set) => ({
  user: null,
  books: [],
  issues: {},
  loading: false,
  error: null,

  fetchUser: async () => {
    set({ loading: true, error: null });
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        set({
          user: {
            id: session.user.id,
            email: session.user.email || '',
          },
        });
      }
    } catch (err) {
      set({ error: err instanceof Error ? err.message : 'Failed to fetch user' });
    } finally {
      set({ loading: false });
    }
  },

  fetchBooks: async () => {
    set({ loading: true, error: null });
    try {
      const { data, error } = await supabase
        .from('books')
        .select('*')
        .is('parent_id', null) // Only fetch parent comics
        .order('created_at', { ascending: false });

      if (error) throw error;

      set({ books: data as Book[] });
    } catch (err) {
      set({ error: err instanceof Error ? err.message : 'Failed to fetch books' });
    } finally {
      set({ loading: false });
    }
  },

  fetchIssues: async (bookId: string) => {
    set({ loading: true, error: null });
    try {
      const { data, error } = await supabase
        .from('comic_issues')
        .select('*')
        .eq('book_id', bookId)
        .order('issue_number', { ascending: true });

      if (error) throw error;

      set((state) => ({
        issues: {
          ...state.issues,
          [bookId]: data as ComicIssue[],
        },
      }));
    } catch (err) {
      set({ error: err instanceof Error ? err.message : 'Failed to fetch issues' });
    } finally {
      set({ loading: false });
    }
  },

  clearBooks: () => set({ books: [], issues: {}, error: null }),
}));





'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { BookFormData, bookSchema } from '@/schema/bookSchema';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          reset({
            name: data.name,
            description: '',
            price: data.price?.[0]?.price || 5,
            index: undefined,
            category: 'comic_issue',
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, reset, toast]);

  const onSubmit = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage && data.coverImage.length > 0) {
        const file = data.coverImage[0]; // Extract the first file from FileList
        const fileExt = file.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        console.log('Submitting file:', file);

        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, file, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: parentId || null,
      });

      if (error) throw error;

      toast({
        title: parentId ? 'BOOM! ISSUE ADDED!' : 'POW! COMIC CREATED!',
        description: parentId
          ? `Issue for "${data.name}" has been added`
          : `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
              placeholder="The Anointed 7"
              disabled={!!parentId}
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
              placeholder="Enter a description of the comic..."
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
              placeholder="5.00"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="index" className="text-lg">
              Issue Index (for comic issues, optional)
            </Label>
            <Input
              id="index"
              {...register('index', { valueAsNumber: true })}
              type="number"
              className="border-2 border-black h-12"
              placeholder="1"
            />
            {errors.index && <p className="text-destructive text-sm">{errors.index.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue="graphic_novel">
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="coverImage" className="text-lg">
              Cover Image
            </Label>
            <Input
              id="coverImage"
              type="file"
              accept="image/jpeg,image/png"
              {...register('coverImage', { required: false })}
              onChange={(e) => console.log('File selected:', e.target.files?.[0])}
              className="border-2 border-black h-12"
            />
            {errors.coverImage && (
              <p className="text-destructive text-sm">{errors.coverImage.message}</p>
            )}
            {coverImage && coverImage.length > 0 && (
              <div className="mt-2">
                <p className="text-sm text-muted-foreground">Selected: {coverImage[0].name}</p>
              </div>
            )}
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-end gap-4">
            <Link href="/dashboard">
              <Button type="button" variant="outline" className="comic-button">
                CANCEL
              </Button>
            </Link>
            <Button type="submit" className="comic-button gap-2" disabled={isSubmitting}>
              <Save className="h-5 w-5" />
              {isSubmitting ? 'SAVING...' : parentId ? 'PUBLISH ISSUE' : 'PUBLISH COMIC'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}


















'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { BookFormData, bookSchema } from '@/schema/bookSchema';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          reset({
            name: data.name,
            description: '',
            price: data.price?.[0]?.price || 5,
            index: undefined,
            category: 'comic_issue',
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, reset, toast]);

  const onSubmit = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage) {
        const fileExt = data.coverImage.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, data.coverImage, {
            cacheControl: '3600',
            upsert: false,
          });

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: parentId || null,
      });

      if (error) throw error;

      toast({
        title: parentId ? 'BOOM! ISSUE ADDED!' : 'POW! COMIC CREATED!',
        description: parentId
          ? `Issue for "${data.name}" has been added`
          : `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
              placeholder="The Anointed 7"
              disabled={!!parentId}
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
              placeholder="Enter a description of the comic..."
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
              placeholder="5.00"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="index" className="text-lg">
              Issue Index (for comic issues, optional)
            </Label>
            <Input
              id="index"
              {...register('index', { valueAsNumber: true })}
              type="number"
              className="border-2 border-black h-12"
              placeholder="1"
            />
            {errors.index && <p className="text-destructive text-sm">{errors.index.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue="graphic_novel">
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="coverImage" className="text-lg">
              Cover Image
            </Label>
            <Input
              id="coverImage"
              type="file"
              accept="image/jpeg,image/png"
              {...register('coverImage', { required: false })}
              className="border-2 border-black h-12"
            />
            {errors.coverImage && (
              <p className="text-destructive text-sm">{errors.coverImage.message}</p>
            )}
            {coverImage && (
              <div className="mt-2">
                <p className="text-sm text-muted-foreground">Selected: {coverImage.name}</p>
              </div>
            )}
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-end gap-4">
            <Link href="/dashboard">
              <Button type="button" variant="outline" className="comic-button">
                CANCEL
              </Button>
            </Link>
            <Button type="submit" className="comic-button gap-2" disabled={isSubmitting}>
              <Save className="h-5 w-5" />
              {isSubmitting ? 'SAVING...' : parentId ? 'PUBLISH ISSUE' : 'PUBLISH COMIC'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}







'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { BookFormData, bookSchema } from '@/schema/bookSchema';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          reset({
            name: data.name,
            description: '',
            price: data.price?.[0]?.price || 5,
            index: undefined,
            category: 'comic_issue', // Force category to comic_issue for issues
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, reset, toast]);

  const onSubmit = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage) {
        const fileExt = data.coverImage.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, data.coverImage);

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: parentId || null,
      });

      if (error) throw error;

      toast({
        title: parentId ? 'BOOM! ISSUE ADDED!' : 'POW! COMIC CREATED!',
        description: parentId
          ? `Issue for "${data.name}" has been added`
          : `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>
      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
              placeholder="The Anointed 7"
              disabled={!!parentId}
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
              placeholder="Enter a description of the comic..."
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
              placeholder="5.00"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="index" className="text-lg">
              Issue Index (for comic issues, optional)
            </Label>
            <Input
              id="index"
              {...register('index', { valueAsNumber: true })}
              type="number"
              className="border-2 border-black h-12"
              placeholder="1"
            />
            {errors.index && <p className="text-destructive text-sm">{errors.index.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue="graphic_novel">
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="coverImage" className="text-lg">
              Cover Image
            </Label>
            <Input
              id="coverImage"
              type="file"
              accept="image/jpeg,image/png"
              {...register('coverImage')}
              className="border-2 border-black h-12"
            />
            {errors.coverImage && (
              <p className="text-destructive text-sm">{errors.coverImage.message}</p>
            )}
            {coverImage && (
              <div className="mt-2">
                <p className="text-sm text-muted-foreground">Selected: {coverImage.name}</p>
              </div>
            )}
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-end gap-4">
            <Link href="/dashboard">
              <Button type="button" variant="outline" className="comic-button">
                CANCEL
              </Button>
            </Link>
            <Button type="submit" className="comic-button gap-2" disabled={isSubmitting}>
              <Save className="h-5 w-5" />
              {isSubmitting ? 'SAVING...' : parentId ? 'PUBLISH ISSUE' : 'PUBLISH COMIC'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}





'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { BookFormData, bookSchema } from '@/schema/bookSchema';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    if (parentId) {
      // Fetch the parent comic to pre-fill fields
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          reset({
            name: data.name,
            description: '',
            price: data.price?.[0]?.price || 5,
            index: undefined,
            category: 'comic_issue', // Force category to comic_issue for issues
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, reset, toast]);

  const onSubmit = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let imagelink_square = null;
      if (data.coverImage) {
        const fileExt = data.coverImage.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, data.coverImage);

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        imagelink_square = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        imagelink_square: imagelink_square || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: parentId || null, // Set parent_id if adding an issue
      });

      if (error) throw error;

      toast({
        title: parentId ? 'BOOM! ISSUE ADDED!' : 'POW! COMIC CREATED!',
        description: parentId
          ? `Issue for "${data.name}" has been added`
          : `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
              placeholder="The Anointed 7"
              disabled={!!parentId} // Disable if adding an issue
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
              placeholder="Enter a description of the comic..."
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
              placeholder="5.00"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="index" className="text-lg">
              Issue Index (for comic issues, optional)
            </Label>
            <Input
              id="index"
              {...register('index', { valueAsNumber: true })}
              type="number"
              className="border-2 border-black h-12"
              placeholder="1"
            />
            {errors.index && <p className="text-destructive text-sm">{errors.index.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue="graphic_novel">
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="coverImage" className="text-lg">
              Cover Image
            </Label>
            <Input
              id="coverImage"
              type="file"
              accept="image/jpeg,image/png"
              {...register('coverImage')}
              className="border-2 border-black h-12"
            />
            {errors.coverImage && (
              <p className="text-destructive text-sm">{errors.coverImage.message}</p>
            )}
            {coverImage && (
              <div className="mt-2">
                <p className="text-sm text-muted-foreground">Selected: {coverImage.name}</p>
              </div>
            )}
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-end gap-4">
            <Link href="/dashboard">
              <Button type="button" variant="outline" className="comic-button">
                CANCEL
              </Button>
            </Link>
            <Button type="submit" className="comic-button gap-2" disabled={isSubmitting}>
              <Save className="h-5 w-5" />
              {isSubmitting ? 'SAVING...' : parentId ? 'PUBLISH ISSUE' : 'PUBLISH COMIC'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}



'use client';

import type React from 'react';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Save, Upload } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { BookFormData, bookSchema } from '@/schema/bookSchema';

export default function AddComicPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const parentId = searchParams.get('parent_id');
  const { toast } = useToast();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    reset,
  } = useForm<BookFormData>({
    resolver: zodResolver(bookSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 5,
      index: undefined,
      category: 'graphic_novel',
    },
  });

  const coverImage = watch('coverImage');

  useEffect(() => {
    if (parentId) {
      const fetchParentComic = async () => {
        const { data, error } = await supabase
          .from('books')
          .select('*')
          .eq('id', parentId)
          .single();

        if (error) {
          toast({
            title: 'ERROR',
            description: 'Failed to load parent comic.',
            variant: 'destructive',
          });
          return;
        }

        if (data) {
          reset({
            name: data.name,
            description: '',
            price: data.price?.[0]?.price || 5,
            index: undefined,
            category: 'comic_issue', // Force category to comic_issue for issues
          });
        }
      };
      fetchParentComic();
    }
  }, [parentId, reset, toast]);

  const onSubmit = async (data: BookFormData) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        toast({
          title: 'AUTH ERROR',
          description: 'You must be logged in to add a comic.',
          variant: 'destructive',
        });
        router.push('/login');
        return;
      }

      let coverImageUrl = null;
      if (data.coverImage) {
        const fileExt = data.coverImage.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        const { error: uploadError } = await supabase.storage
          .from('comic-cover')
          .upload(fileName, data.coverImage);

        if (uploadError) throw uploadError;

        const { data: urlData } = supabase.storage
          .from('comic-cover')
          .getPublicUrl(fileName);

        coverImageUrl = urlData.publicUrl;
      }

      const { error } = await supabase.from('books').insert({
        name: data.name,
        Cover_Image: coverImageUrl || null,
        description: data.description,
        price: data.price ? [{ price: data.price.toString(), currency: 'USD' }] : null,
        index: data.index || null,
        category: data.category,
        parent_id: parentId || null,
      });

      if (error) throw error;

      toast({
        title: parentId ? 'BOOM! ISSUE ADDED!' : 'POW! COMIC CREATED!',
        description: parentId
          ? `Issue for "${data.name}" has been added`
          : `"${data.name}" has been added to your collection`,
        duration: 5000,
      });

      router.push('/dashboard');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to add comic';
      toast({
        title: 'ERROR',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <div className="flex items-center mb-6">
        <Link href="/dashboard">
          <Button variant="outline" size="icon" className="mr-4 comic-panel">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="comic-heading text-4xl text-black">
          {parentId ? 'ADD NEW ISSUE' : 'ADD NEW COMIC'}
        </h1>
      </div>

      <Card className="comic-panel p-6">
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-lg">
              Title
            </Label>
            <Input
              id="name"
              {...register('name')}
              className="border-2 border-black h-12"
              placeholder="The Anointed 7"
              disabled={!!parentId}
            />
            {errors.name && <p className="text-destructive text-sm">{errors.name.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-lg">
              Description
            </Label>
            <Textarea
              id="description"
              {...register('description')}
              className="border-2 border-black min-h-[120px]"
              placeholder="Enter a description of the comic..."
            />
            {errors.description && (
              <p className="text-destructive text-sm">{errors.description.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="price" className="text-lg">
              Price (USD)
            </Label>
            <Input
              id="price"
              {...register('price', { valueAsNumber: true })}
              type="number"
              step="0.01"
              className="border-2 border-black h-12"
              placeholder="5.00"
            />
            {errors.price && <p className="text-destructive text-sm">{errors.price.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="index" className="text-lg">
              Issue Index (for comic issues, optional)
            </Label>
            <Input
              id="index"
              {...register('index', { valueAsNumber: true })}
              type="number"
              className="border-2 border-black h-12"
              placeholder="1"
            />
            {errors.index && <p className="text-destructive text-sm">{errors.index.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="text-lg">
              Category
            </Label>
            <Select {...register('category')} defaultValue="graphic_novel">
              <SelectTrigger className="border-2 border-black h-12">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="graphic_novel">Graphic Novel</SelectItem>
                <SelectItem value="comic_issue">Comic Issue</SelectItem>
              </SelectContent>
            </Select>
            {errors.category && <p className="text-destructive text-sm">{errors.category.message}</p>}
          </div>

          <div className="space-y-2">
            <Label htmlFor="coverImage" className="text-lg">
              Cover Image
            </Label>
            <Input
              id="coverImage"
              type="file"
              accept="image/jpeg,image/png"
              {...register('coverImage')}
              className="border-2 border-black h-12"
            />
            {errors.coverImage && (
              <p className="text-destructive text-sm">{errors.coverImage.message}</p>
            )}
            {coverImage && (
              <div className="mt-2">
                <p className="text-sm text-muted-foreground">Selected: {coverImage.name}</p>
              </div>
            )}
            <p className="text-xs text-muted-foreground">Recommended size: 800x1200px. Max file size: 5MB.</p>
          </div>

          <div className="pt-4 flex justify-end gap-4">
            <Link href="/dashboard">
              <Button type="button" variant="outline" className="comic-button">
                CANCEL
              </Button>
            </Link>
            <Button type="submit" className="comic-button gap-2" disabled={isSubmitting}>
              <Save className="h-5 w-5" />
              {isSubmitting ? 'SAVING...' : parentId ? 'PUBLISH ISSUE' : 'PUBLISH COMIC'}
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
}











//parent link on dashboard
'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Calendar, BookOpen, Layers } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useStore } from '@/utils/store';
import { supabase } from '@/lib/supabase';
import { Book } from '@/types/types';

export default function Dashboard() {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const { books, user, loading, error, fetchBooks, fetchUser, clearBooks } = useStore();
  const router = useRouter();

  useEffect(() => {
    const checkAuthAndFetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          clearBooks();
          router.push('/login');
          return;
        }
        if (!user) {
          await fetchUser();
        }
        await fetchBooks();
      } catch (err) {
        console.error('Error checking auth:', err);
        clearBooks();
        router.push('/login');
      }
    };
    checkAuthAndFetchData();
  }, [fetchBooks, fetchUser, clearBooks, router, user]);

  useEffect(() => {
    console.log('Books:', books);
    console.log('Error:', error);
    console.log('User:', user);
  }, [books, error, user]);

  if (user && user.role !== 'admin') {
    router.push('/login');
    return null;
  }

  return (
    <div className="space-y-6">
      {/* Existing dashboard UI */}
      {!loading && !error && viewMode === 'grid' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {books.map((book: Book) => (
            <Card key={book.id} className="comic-panel overflow-hidden">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h2 className="comic-heading text-2xl mb-1">{book.name}</h2>
                    <div className="flex flex-wrap gap-2">
                      <Badge variant="outline" className="font-medium">
                        {book.category}
                      </Badge>
                      {book.issue_count && book.issue_count > 0 && (
                        <Badge variant="secondary" className="font-medium flex items-center gap-1">
                          <Layers className="h-3 w-3" />
                          {book.issue_count} {book.issue_count === 1 ? 'Issue' : 'Issues'}
                        </Badge>
                      )}
                    </div>
                  </div>
                  <Link href={`/dashboard/edit/${book.id}`}>
                    <Button size="icon" variant="ghost">
                      <Edit className="h-5 w-5" />
                    </Button>
                  </Link>
                </div>

                <div className="flex items-center text-sm text-muted-foreground mb-4">
                  <Calendar className="h-4 w-4 mr-1" />
                  <span>
                    {book.release_date
                      ? new Date(book.release_date).toLocaleDateString()
                      : 'N/A'}
                  </span>
                </div>

                <p className="text-sm line-clamp-3">{book.description}</p>
              </div>

              <div className="bg-muted p-4 border-t border-border flex gap-2">
                <Link href={`/dashboard/edit/${book.id}`} className="flex-1">
                  <Button variant="outline" className="comic-button w-full">
                    EDIT COMIC
                  </Button>
                </Link>
                <Link href={`/dashboard/add?parent_id=${book.id}`} className="flex-shrink-0">
                  <Button variant="default" className="comic-button">
                    <Plus className="h-4 w-4" />
                  </Button>
                </Link>
              </div>
            </Card>
          ))}
        </div>
      )}

      {!loading && !error && viewMode === 'list' && (
        <Card className="comic-panel overflow-hidden">
          <div className="divide-y divide-border">
            {books.map((book: Book) => (
              <div
                key={book.id}
                className="p-4 flex flex-col sm:flex-row justify-between gap-4"
              >
                <div className="space-y-1">
                  <div className="flex items-center gap-2">
                    <BookOpen className="h-5 w-5" />
                    <h3 className="comic-heading text-xl">{book.name}</h3>
                  </div>
                  <div className="flex flex-wrap gap-2 items-center text-sm text-muted-foreground">
                    <Badge variant="outline" className="font-medium">
                      {book.category}
                    </Badge>
                    {book.issue_count && book.issue_count > 0 && (
                      <Badge variant="secondary" className="font-medium flex items-center gap-1">
                        <Layers className="h-3 w-3" />
                        {book.issue_count} {book.issue_count === 1 ? 'Issue' : 'Issues'}
                      </Badge>
                    )}
                    <span className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      {book.release_date
                        ? new Date(book.release_date).toLocaleDateString()
                        : 'N/A'}
                    </span>
                  </div>
                </div>

                <div className="flex gap-2 shrink-0">
                  <Link href={`/dashboard/add?parent_id=${book.id}`}>
                    <Button variant="outline" className="comic-button">
                      <Plus className="h-4 w-4 mr-1" />
                      ADD ISSUE
                    </Button>
                  </Link>
                  <Link href={`/dashboard/edit/${book.id}`}>
                    <Button className="comic-button">EDIT</Button>
                  </Link>
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}
      {/* Rest of the dashboard UI */}
    </div>
  );
}


