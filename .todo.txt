const handleSignup = async (e: React.FormEvent) => {
  e.preventDefault();
  setIsLoading(true);
  setError(null);

  // Basic validation
  if (!formData.name.trim()) {
    setError('Name is required');
    setIsLoading(false);
    return;
  }

  if (!formData.email.trim() || !formData.email.includes('@')) {
    setError('Please enter a valid email address');
    setIsLoading(false);
    return;
  }

  try {
    // Sign up the user without a password (Supabase requires a temporary one)
    const { data: authData, error } = await supabase.auth.signUp({
      email: formData.email,
      password: Math.random().toString(36).slice(-8), // Temporary password (not used)
      options: {
        emailRedirectTo: 'http://localhost:3000/dashboard', // Redirect to dashboard after magic link
        data: {
          name: formData.name,
          role: formData.email.includes('admin') ? 'admin' : 'user',
          subscribed: false,
        },
      },
    });

    if (error) throw error;

    // Send a magic link for passwordless login
    const { error: otpError } = await supabase.auth.signInWithOtp({
      email: formData.email,
      options: {
        emailRedirectTo: 'http://localhost:3000/dashboard', // Redirect to dashboard
      },
    });

    if (otpError) throw otpError;

    toast({
      title: 'SIGNUP SUCCESSFUL!',
      description: `Welcome to Kingdom Comics, ${formData.name}! Check your email for a magic link to log in.`,
      duration: 5000,
    });

    // Redirect to login page (temporary, user will use magic link to go to dashboard)
    router.push('/login');
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'Failed to sign up';
    setError(errorMessage);
    toast({
      title: 'SIGNUP ERROR',
      description: errorMessage,
      variant: 'destructive',
      duration: 5000,
    });
    setIsLoading(false);
  }
};




'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { LoginFormData, loginSchema } from '@/schema/auth';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';
import { Session } from '@supabase/supabase-js';

export default function LoginPage() {
  const [isResending, setIsResending] = useState(false);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoadingSession, setIsLoadingSession] = useState(true);
  const router = useRouter();
  const { toast } = useToast();
  const searchParams = useSearchParams();

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    getValues,
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
    },
  });

  // Check initial session state
  useEffect(() => {
    const fetchSession = async () => {
      const { data, error } = await supabase.auth.getSession();
      if (error) {
        console.error('Error fetching session:', error);
        setIsLoadingSession(false);
        return;
      }
      setSession(data.session);
      setIsLoadingSession(false);
    };

    fetchSession();
  }, []);

  // Handle magic link redirect
  useEffect(() => {
    const handleMagicLinkRedirect = async () => {
      // Check for redirect parameters (e.g., access_token from magic link)
      const accessToken = searchParams.get('access_token');
      if (accessToken) {
        const { data, error } = await supabase.auth.getSession();
        if (error) {
          toast({
            title: 'LOGIN ERROR',
            description: error.message,
            variant: 'destructive',
            duration: 5000,
          });
          return;
        }

        if (data.session) {
          toast({
            title: 'LOGIN SUCCESSFUL!',
            description: 'Welcome back to Kingdom Comics Admin!',
            duration: 5000,
          });
          router.push('/loading-screen');
        }
      }
    };

    // Listen for auth state changes (e.g., after magic link login)
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      if (session && searchParams.get('access_token')) {
        toast({
          title: 'LOGIN SUCCESSFUL!',
          description: 'Welcome back to Kingdom Comics Admin!',
          duration: 5000,
        });
        router.push('/loading-screen');
      }
    });

    handleMagicLinkRedirect();

    return () => {
      subscription?.unsubscribe();
    };
  }, [router, toast, searchParams]);

  const onSubmit = async (data: LoginFormData) => {
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: data.email,
        options: {
          emailRedirectTo: 'http://localhost:3000/login',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK SENT!',
        description: 'Check your email for a magic link to log in.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to send magic link';
      toast({
        title: 'LOGIN ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Login error:', err);
    }
  };

  const resendMagicLink = async () => {
    const email = getValues('email');
    if (!email || !email.includes('@')) {
      toast({
        title: 'INVALID EMAIL',
        description: 'Please enter a valid email address to resend the magic link.',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    setIsResending(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: 'http://localhost:3000/login',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK RESENT!',
        description: 'Check your email for the new magic link.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to resend magic link';
      toast({
        title: 'RESEND ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Resend error:', err);
    } finally {
      setIsResending(false);
    }
  };

  if (isLoadingSession) {
    return <div>Loading...</div>;
  }

  const isLoggedIn = !!session;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <div className="w-full max-w-md">
        <div className="speech-bubble mb-6 mx-auto w-fit">
          <h2 className="comic-heading text-2xl text-center">ADMIN ONLY!</h2>
        </div>

        <Card className="comic-panel p-6">
          <div className="mb-6 text-center">
            <div className="flex justify-center mb-4">
              <Image
                src="/kingdom-logo.png"
                alt="Kingdom Comics"
                width={100}
                height={100}
                priority
              />
            </div>
            <h1 className="comic-heading text-4xl text-black mb-2">KINGDOM COMICS ADMIN</h1>
            <p className="text-sm text-muted-foreground">
              Enter your email to access the admin panel
            </p>
          </div>

          {isLoggedIn && (
            <div className="text-center mb-4">
              <p className="text-green-600">
                You are already logged in as {session?.user.email}.{' '}
                <Button variant="link" onClick={() => supabase.auth.signOut().then(() => router.push('/login'))}>
                  Log out
                </Button>
              </p>
              <Button onClick={() => router.push('/loading-screen')}>Go to Admin Panel</Button>
            </div>
          )}

          {!isLoggedIn && (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-lg">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  {...control.register('email')}
                  className="border-2 border-black h-12"
                  placeholder="admin@comics.com"
                  required
                />
                {errors.email && (
                  <p className="text-destructive text-sm">{errors.email.message}</p>
                )}
              </div>

              <Button
                type="submit"
                className="comic-button w-full h-12 text-xl"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'SENDING MAGIC LINK...' : 'ACCESS ADMIN PANEL'}
              </Button>

              <Button
                type="button"
                onClick={resendMagicLink}
                className="comic-button w-full h-12 text-xl"
                disabled={isResending || isSubmitting}
              >
                {isResending ? 'RESENDING...' : 'RESEND MAGIC LINK'}
              </Button>

              <div className="text-center mt-4">
                <p className="text-sm text-muted-foreground">
                  Don't have an account?{' '}
                  <Link href="/signup" className="text-primary font-medium hover:underline">
                    Sign up here
                  </Link>
                </p>
              </div>
            </form>
          )}
        </Card>
      </div>
    </div>
  );
}

































'use client';

import type React from 'react';
import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { LoginFormData, loginSchema } from '@/schema/auth';
import { zodResolver } from '@hookform/resolvers/zod';
import { supabase } from '@/lib/supabase';

export default function LoginPage() {
  const [isResending, setIsResending] = useState(false);
  const router = useRouter();
  const { toast } = useToast();
  const searchParams = useSearchParams();

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    getValues,
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
    },
  });

  // Handle magic link redirect
  useEffect(() => {
    const handleMagicLinkRedirect = async () => {
      // Check for redirect parameters (e.g., access_token or error from magic link)
      const accessToken = searchParams.get('access_token');
      if (accessToken) {
        const { data, error } = await supabase.auth.getSession();
        if (error) {
          toast({
            title: 'LOGIN ERROR',
            description: error.message,
            variant: 'destructive',
            duration: 5000,
          });
          return;
        }

        if (data.session) {
          toast({
            title: 'LOGIN SUCCESSFUL!',
            description: 'Welcome back to Kingdom Comics Admin!',
            duration: 5000,
          });
          router.push('/loading-screen');
        }
      }
    };

    // Listen for auth state changes (e.g., after magic link login)
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session && searchParams.get('access_token')) {
        toast({
          title: 'LOGIN SUCCESSFUL!',
          description: 'Welcome back to Kingdom Comics Admin!',
          duration: 5000,
        });
        router.push('/loading-screen');
      }
    });

    handleMagicLinkRedirect();

    return () => {
      subscription?.unsubscribe();
    };
  }, [router, toast, searchParams]);

  const onSubmit = async (data: LoginFormData) => {
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: data.email,
        options: {
          emailRedirectTo: 'http://localhost:3000/login',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK SENT!',
        description: 'Check your email for a magic link to log in.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to send magic link';
      toast({
        title: 'LOGIN ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Login error:', err);
    }
  };

  const resendMagicLink = async () => {
    const email = getValues('email');
    if (!email || !email.includes('@')) {
      toast({
        title: 'INVALID EMAIL',
        description: 'Please enter a valid email address to resend the magic link.',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    setIsResending(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: 'http://localhost:3000/login',
        },
      });

      if (error) throw error;

      toast({
        title: 'MAGIC LINK RESENT!',
        description: 'Check your email for the new magic link.',
        duration: 5000,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to resend magic link';
      toast({
        title: 'RESEND ERROR',
        description: errorMessage,
        variant: 'destructive',
        duration: 5000,
      });
      console.error('Resend error:', err);
    } finally {
      setIsResending(false);
    }
  };

  // Check if user is already logged in (without immediate redirect)
  const { data: { session } } = supabase.auth.getSession();
  const isLoggedIn = !!session;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[url('/comic-bg-light.svg')] bg-cover p-4">
      <div className="w-full max-w-md">
        <div className="speech-bubble mb-6 mx-auto w-fit">
          <h2 className="comic-heading text-2xl text-center">ADMIN ONLY!</h2>
        </div>

        <Card className="comic-panel p-6">
          <div className="mb-6 text-center">
            <div className="flex justify-center mb-4">
              <Image
                src="/kingdom-logo.png"
                alt="Kingdom Comics"
                width={100}
                height={100}
                priority
              />
            </div>
            <h1 className="comic-heading text-4xl text-black mb-2">KINGDOM COMICS ADMIN</h1>
            <p className="text-sm text-muted-foreground">
              Enter your email to access the admin panel
            </p>
          </div>

          {isLoggedIn && (
            <div className="text-center mb-4">
              <p className="text-green-600">
                You are already logged in as {session?.user.email}.{' '}
                <Button variant="link" onClick={() => supabase.auth.signOut().then(() => router.push('/login'))}>
                  Log out
                </Button>
              </p>
              <Button onClick={() => router.push('/loading-screen')}>Go to Admin Panel</Button>
            </div>
          )}

          {!isLoggedIn && (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email" className="text-lg">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  {...control.register('email')}
                  className="border-2 border-black h-12"
                  placeholder="admin@comics.com"
                  required
                />
                {errors.email && (
                  <p className="text-destructive text-sm">{errors.email.message}</p>
                )}
              </div>

              <Button
                type="submit"
                className="comic-button w-full h-12 text-xl"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'SENDING MAGIC LINK...' : 'ACCESS ADMIN PANEL'}
              </Button>

              <Button
                type="button"
                onClick={resendMagicLink}
                className="comic-button w-full h-12 text-xl"
                disabled={isResending || isSubmitting}
              >
                {isResending ? 'RESENDING...' : 'RESEND MAGIC LINK'}
              </Button>

              <div className="text-center mt-4">
                <p className="text-sm text-muted-foreground">
                  Don't have an account?{' '}
                  <Link href="/signup" className="text-primary font-medium hover:underline">
                    Sign up here
                  </Link>
                </p>
              </div>
            </form>
          )}
        </Card>
      </div>
    </div>
  );
}
            <div className="space-y-2">
              <Label htmlFor="email" className="text-lg">
                Email
              </Label>
              <Input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="border-2 border-black h-12"
                placeholder="admin@comics.com"
                required
              />
            </div>

            {error && <p className="text-destructive text-sm">{error}</p>}

            <Button
              type="submit"
              className="comic-button w-full h-12 text-xl mt-6"
              disabled={isLoading || connectionStatus?.includes('Failed')}
            >
              {isLoading ? 'SENDING MAGIC LINK...' : 'SIGN UP WITH MAGIC LINK'}
            </Button>

            <div className="text-center mt-4">
              <p className="text-sm text-muted-foreground">
                Already have an account?{' '}
                <Link href="/login" className="text-primary font-medium hover:underline">
                  Login here
                </Link>
              </p>
            </div>
          </form>
        </Card>
      </div>
    </div>
  );
}




















'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { supabase } from '@/lib/supabase';

const signupSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email address'),
});

type SignupFormData = z.infer<typeof signupSchema>;

export default function SignupPage() {
  const [message, setMessage] = useState<string | null>(null);

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<SignupFormData>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      name: '',
      email: '',
    },
  });

  const onSubmit = async (data: SignupFormData) => {
    try {
      setMessage(null);
      console.log('Starting signup process with data:', data);

      // Sign up the user without a password (Supabase will manage the user record)
      const { data: authData, error } = await supabase.auth.signUp({
        email: data.email,
        password: Math.random().toString(36).slice(-8), // Temporary password (not used)
        options: {
          emailRedirectTo: 'http://localhost:3000/login', // Redirect to login page after magic link
          data: {
            name: data.name,
            role: data.email.includes('admin') ? 'admin' : 'user',
            subscribed: false,
          },
        },
      });

      if (error) throw error;

      // Send a magic link for passwordless login
      const { error: otpError } = await supabase.auth.signInWithOtp({
        email: data.email,
        options: {
          emailRedirectTo: 'http://localhost:3000/login',
        },
      });

      if (otpError) throw otpError;

      setMessage('Check your email for a magic link to complete your signup.');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to sign up';
      setMessage(errorMessage);
      console.error('Signup error:', err);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6">Sign Up</h1>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">
            Name
          </label>
          <input
            id="name"
            {...control.register('name')}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
          {errors.name && (
            <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
          )}
        </div>

        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            {...control.register('email')}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
          {errors.email && (
            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
          )}
        </div>

        <button
          type="submit"
          disabled={isSubmitting}
          className="w-full py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-300"
        >
          {isSubmitting ? 'Submitting...' : 'Sign Up with Magic Link'}
        </button>
      </form>

      {message && (
        <div
          className={`mt-4 p-3 rounded-md ${
            message.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'
          }`}
        >
          {message}
        </div>
      )}
    </div>
  );
}







import { supabase } from '@/lib/supabase';

export default async function Home() {
  const { data, error } = await supabase.from('books').select('id, name').limit(1);

  if (error) {
    console.error('Error fetching books:', error);
    return <div>Error loading books</div>;
  }

  return (
    <div>
      <h1>Kingdom Comics Admin Panel</h1>
      {data && data.length > 0 ? (
        <p>First book: {data[0].name}</p>
      ) : (
        <p>No books found</p>
      )}
    </div>
  );
}